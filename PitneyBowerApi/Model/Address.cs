/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum PARSED for value: PARSED
            /// </summary>
            [EnumMember(Value = "PARSED")]
            PARSED = 1,

            /// <summary>
            /// Enum VALIDATEDCHANGED for value: VALIDATED_CHANGED
            /// </summary>
            [EnumMember(Value = "VALIDATED_CHANGED")]
            VALIDATEDCHANGED = 2,

            /// <summary>
            /// Enum VALIDATEDANDNOTCHANGED for value: VALIDATED_AND_NOT_CHANGED
            /// </summary>
            [EnumMember(Value = "VALIDATED_AND_NOT_CHANGED")]
            VALIDATEDANDNOTCHANGED = 3,

            /// <summary>
            /// Enum NOTCHANGED for value: NOT_CHANGED
            /// </summary>
            [EnumMember(Value = "NOT_CHANGED")]
            NOTCHANGED = 4

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines TaxIdType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxIdTypeEnum
        {
            /// <summary>
            /// Enum EIN for value: EIN
            /// </summary>
            [EnumMember(Value = "EIN")]
            EIN = 1,

            /// <summary>
            /// Enum GST for value: GST
            /// </summary>
            [EnumMember(Value = "GST")]
            GST = 2,

            /// <summary>
            /// Enum VAT for value: VAT
            /// </summary>
            [EnumMember(Value = "VAT")]
            VAT = 3,

            /// <summary>
            /// Enum RFC for value: RFC
            /// </summary>
            [EnumMember(Value = "RFC")]
            RFC = 4,

            /// <summary>
            /// Enum EORI for value: EORI
            /// </summary>
            [EnumMember(Value = "EORI")]
            EORI = 5

        }

        /// <summary>
        /// Gets or Sets TaxIdType
        /// </summary>
        [DataMember(Name="taxIdType", EmitDefaultValue=false)]
        public TaxIdTypeEnum? TaxIdType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Address() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="addressLines">addressLines.</param>
        /// <param name="carrierRoute">carrierRoute.</param>
        /// <param name="cityTown">cityTown.</param>
        /// <param name="company">company.</param>
        /// <param name="countryCode">2-character country code (ISO-3166-1 alpha-2) (required).</param>
        /// <param name="deliveryPoint">deliveryPoint.</param>
        /// <param name="email">email.</param>
        /// <param name="name">name.</param>
        /// <param name="phone">phone.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="residential">residential.</param>
        /// <param name="stateProvince">stateProvince.</param>
        /// <param name="status">status.</param>
        /// <param name="taxId">taxId.</param>
        /// <param name="taxIdType">taxIdType.</param>
         public Address(List<string> addressLines = default(List<string>), string carrierRoute = default(string), string cityTown = default(string), string company = default(string), string countryCode = default(string), string deliveryPoint = default(string), string email = default(string), string name = default(string), string phone = default(string), string postalCode = default(string), bool residential = default(bool), string stateProvince = default(string), StatusEnum? status = default(StatusEnum?), string taxId = default(string), TaxIdTypeEnum? taxIdType = default(TaxIdTypeEnum?))
        {
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for Address and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            
            this.AddressLines = addressLines;
            this.CarrierRoute = carrierRoute;
            this.CityTown = cityTown;
            this.Company = company;
            this.DeliveryPoint = deliveryPoint;
            this.Email = email;
            this.Name = name;
            this.Phone = phone;
            this.PostalCode = postalCode;
            this.Residential = residential;
            this.StateProvince = stateProvince;
            this.Status = status;
            this.TaxId = taxId;
            this.TaxIdType = taxIdType;
        }
        
        /// <summary>
        /// Gets or Sets AddressLines
        /// </summary>
        [DataMember(Name="addressLines", EmitDefaultValue=false)]
        public List<string> AddressLines { get; set; }

        /// <summary>
        /// Gets or Sets CarrierRoute
        /// </summary>
        [DataMember(Name="carrierRoute", EmitDefaultValue=false)]
        public string CarrierRoute { get; set; }

        /// <summary>
        /// Gets or Sets CityTown
        /// </summary>
        [DataMember(Name="cityTown", EmitDefaultValue=false)]
        public string CityTown { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// 2-character country code (ISO-3166-1 alpha-2)
        /// </summary>
        /// <value>2-character country code (ISO-3166-1 alpha-2)</value>
        [DataMember(Name="countryCode", EmitDefaultValue=true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPoint
        /// </summary>
        [DataMember(Name="deliveryPoint", EmitDefaultValue=false)]
        public string DeliveryPoint { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Residential
        /// </summary>
        [DataMember(Name="residential", EmitDefaultValue=false)]
        public bool Residential { get; set; }

        /// <summary>
        /// Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name="stateProvince", EmitDefaultValue=false)]
        public string StateProvince { get; set; }


        /// <summary>
        /// Gets or Sets TaxId
        /// </summary>
        [DataMember(Name="taxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressLines: ").Append(AddressLines).Append("\n");
            sb.Append("  CarrierRoute: ").Append(CarrierRoute).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  DeliveryPoint: ").Append(DeliveryPoint).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Residential: ").Append(Residential).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  TaxIdType: ").Append(TaxIdType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLines == input.AddressLines ||
                    this.AddressLines != null &&
                    input.AddressLines != null &&
                    this.AddressLines.SequenceEqual(input.AddressLines)
                ) && 
                (
                    this.CarrierRoute == input.CarrierRoute ||
                    (this.CarrierRoute != null &&
                    this.CarrierRoute.Equals(input.CarrierRoute))
                ) && 
                (
                    this.CityTown == input.CityTown ||
                    (this.CityTown != null &&
                    this.CityTown.Equals(input.CityTown))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.DeliveryPoint == input.DeliveryPoint ||
                    (this.DeliveryPoint != null &&
                    this.DeliveryPoint.Equals(input.DeliveryPoint))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Residential == input.Residential ||
                    (this.Residential != null &&
                    this.Residential.Equals(input.Residential))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                ) && 
                (
                    this.TaxIdType == input.TaxIdType ||
                    (this.TaxIdType != null &&
                    this.TaxIdType.Equals(input.TaxIdType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLines != null)
                    hashCode = hashCode * 59 + this.AddressLines.GetHashCode();
                if (this.CarrierRoute != null)
                    hashCode = hashCode * 59 + this.CarrierRoute.GetHashCode();
                if (this.CityTown != null)
                    hashCode = hashCode * 59 + this.CityTown.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.DeliveryPoint != null)
                    hashCode = hashCode * 59 + this.DeliveryPoint.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Residential != null)
                    hashCode = hashCode * 59 + this.Residential.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TaxId != null)
                    hashCode = hashCode * 59 + this.TaxId.GetHashCode();
                if (this.TaxIdType != null)
                    hashCode = hashCode * 59 + this.TaxIdType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
