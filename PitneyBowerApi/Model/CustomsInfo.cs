/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CustomsInfo
    /// </summary>
    [DataContract]
    public partial class CustomsInfo :  IEquatable<CustomsInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines OtherType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OtherTypeEnum
        {
            /// <summary>
            /// Enum COMMISSIONS for value: COMMISSIONS
            /// </summary>
            [EnumMember(Value = "COMMISSIONS")]
            COMMISSIONS = 1,

            /// <summary>
            /// Enum DISCOUNTS for value: DISCOUNTS
            /// </summary>
            [EnumMember(Value = "DISCOUNTS")]
            DISCOUNTS = 2,

            /// <summary>
            /// Enum HANDLINGFEES for value: HANDLING_FEES
            /// </summary>
            [EnumMember(Value = "HANDLING_FEES")]
            HANDLINGFEES = 3,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4,

            /// <summary>
            /// Enum ROYALTIESANDLICENSEFEES for value: ROYALTIES_AND_LICENSE_FEES
            /// </summary>
            [EnumMember(Value = "ROYALTIES_AND_LICENSE_FEES")]
            ROYALTIESANDLICENSEFEES = 5,

            /// <summary>
            /// Enum TAXES for value: TAXES
            /// </summary>
            [EnumMember(Value = "TAXES")]
            TAXES = 6

        }

        /// <summary>
        /// Gets or Sets OtherType
        /// </summary>
        [DataMember(Name="otherType", EmitDefaultValue=false)]
        public OtherTypeEnum? OtherType { get; set; }
        /// <summary>
        /// Defines ProducerSpecification
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProducerSpecificationEnum
        {
            /// <summary>
            /// Enum MULTIPLESPECIFIED for value: MULTIPLE_SPECIFIED
            /// </summary>
            [EnumMember(Value = "MULTIPLE_SPECIFIED")]
            MULTIPLESPECIFIED = 1,

            /// <summary>
            /// Enum SAME for value: SAME
            /// </summary>
            [EnumMember(Value = "SAME")]
            SAME = 2,

            /// <summary>
            /// Enum SINGLESPECIFIED for value: SINGLE_SPECIFIED
            /// </summary>
            [EnumMember(Value = "SINGLE_SPECIFIED")]
            SINGLESPECIFIED = 3,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 4,

            /// <summary>
            /// Enum AVAILABLEUPONREQUEST for value: AVAILABLE_UPON_REQUEST
            /// </summary>
            [EnumMember(Value = "AVAILABLE_UPON_REQUEST")]
            AVAILABLEUPONREQUEST = 5

        }

        /// <summary>
        /// Gets or Sets ProducerSpecification
        /// </summary>
        [DataMember(Name="producerSpecification", EmitDefaultValue=false)]
        public ProducerSpecificationEnum? ProducerSpecification { get; set; }
        /// <summary>
        /// Defines ReasonForExport
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonForExportEnum
        {
            /// <summary>
            /// Enum GIFT for value: GIFT
            /// </summary>
            [EnumMember(Value = "GIFT")]
            GIFT = 1,

            /// <summary>
            /// Enum COMMERCIALSAMPLE for value: COMMERCIAL_SAMPLE
            /// </summary>
            [EnumMember(Value = "COMMERCIAL_SAMPLE")]
            COMMERCIALSAMPLE = 2,

            /// <summary>
            /// Enum MERCHANDISE for value: MERCHANDISE
            /// </summary>
            [EnumMember(Value = "MERCHANDISE")]
            MERCHANDISE = 3,

            /// <summary>
            /// Enum DOCUMENTS for value: DOCUMENTS
            /// </summary>
            [EnumMember(Value = "DOCUMENTS")]
            DOCUMENTS = 4,

            /// <summary>
            /// Enum RETURNEDGOODS for value: RETURNED_GOODS
            /// </summary>
            [EnumMember(Value = "RETURNED_GOODS")]
            RETURNEDGOODS = 5,

            /// <summary>
            /// Enum SOLD for value: SOLD
            /// </summary>
            [EnumMember(Value = "SOLD")]
            SOLD = 6,

            /// <summary>
            /// Enum NOTSOLD for value: NOT_SOLD
            /// </summary>
            [EnumMember(Value = "NOT_SOLD")]
            NOTSOLD = 7,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 8,

            /// <summary>
            /// Enum DANGEROUSGOOD for value: DANGEROUS_GOOD
            /// </summary>
            [EnumMember(Value = "DANGEROUS_GOOD")]
            DANGEROUSGOOD = 9,

            /// <summary>
            /// Enum HUMANITARIANGOODS for value: HUMANITARIAN_GOODS
            /// </summary>
            [EnumMember(Value = "HUMANITARIAN_GOODS")]
            HUMANITARIANGOODS = 10

        }

        /// <summary>
        /// Gets or Sets ReasonForExport
        /// </summary>
        [DataMember(Name="reasonForExport", EmitDefaultValue=false)]
        public ReasonForExportEnum? ReasonForExport { get; set; }
        /// <summary>
        /// Defines ShippingDocumentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShippingDocumentTypeEnum
        {
            /// <summary>
            /// Enum NAFTA for value: NAFTA
            /// </summary>
            [EnumMember(Value = "NAFTA")]
            NAFTA = 1,

            /// <summary>
            /// Enum COO for value: COO
            /// </summary>
            [EnumMember(Value = "COO")]
            COO = 2

        }

        /// <summary>
        /// Gets or Sets ShippingDocumentType
        /// </summary>
        [DataMember(Name="shippingDocumentType", EmitDefaultValue=false)]
        public ShippingDocumentTypeEnum? ShippingDocumentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomsInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsInfo" /> class.
        /// </summary>
        /// <param name="eELPFC">eELPFC.</param>
        /// <param name="blanketEndDate">format: YYYY-MM-DD.</param>
        /// <param name="blanketStartDate">format: YYYY-MM-DD.</param>
        /// <param name="certificateNumber">certificateNumber.</param>
        /// <param name="comments">comments.</param>
        /// <param name="currencyCode">ISO-4217 (required).</param>
        /// <param name="customsDeclaredValue">customsDeclaredValue.</param>
        /// <param name="declarationStatement">declarationStatement.</param>
        /// <param name="freightCharge">freightCharge.</param>
        /// <param name="fromCustomsReference">fromCustomsReference.</param>
        /// <param name="handlingCosts">handlingCosts.</param>
        /// <param name="importerCustomsReference">importerCustomsReference.</param>
        /// <param name="insuredAmount">insuredAmount.</param>
        /// <param name="insuredNumber">insuredNumber.</param>
        /// <param name="invoiceNumber">invoiceNumber.</param>
        /// <param name="licenseNumber">licenseNumber.</param>
        /// <param name="otherCharge">otherCharge.</param>
        /// <param name="otherDescription">otherDescription.</param>
        /// <param name="otherType">otherType.</param>
        /// <param name="packingCosts">packingCosts.</param>
        /// <param name="producerSpecification">producerSpecification.</param>
        /// <param name="reasonForExport">reasonForExport.</param>
        /// <param name="reasonForExportExplanation">reasonForExportExplanation.</param>
        /// <param name="sdrValue">sdrValue.</param>
        /// <param name="shippingDocumentType">shippingDocumentType.</param>
        /// <param name="signatureContact">signatureContact.</param>
        /// <param name="termsOfSale">termsOfSale.</param>
        public CustomsInfo(string eELPFC = default(string), string blanketEndDate = default(string), string blanketStartDate = default(string), string certificateNumber = default(string), string comments = default(string), string currencyCode = default(string), decimal customsDeclaredValue = default(decimal), string declarationStatement = default(string), decimal freightCharge = default(decimal), string fromCustomsReference = default(string), decimal handlingCosts = default(decimal), string importerCustomsReference = default(string), decimal insuredAmount = default(decimal), string insuredNumber = default(string), string invoiceNumber = default(string), string licenseNumber = default(string), decimal otherCharge = default(decimal), string otherDescription = default(string), OtherTypeEnum? otherType = default(OtherTypeEnum?), decimal packingCosts = default(decimal), ProducerSpecificationEnum? producerSpecification = default(ProducerSpecificationEnum?), ReasonForExportEnum? reasonForExport = default(ReasonForExportEnum?), string reasonForExportExplanation = default(string), decimal sdrValue = default(decimal), ShippingDocumentTypeEnum? shippingDocumentType = default(ShippingDocumentTypeEnum?), Address signatureContact = default(Address), string termsOfSale = default(string))
        {
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for CustomsInfo and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            
            this.EELPFC = eELPFC;
            this.BlanketEndDate = blanketEndDate;
            this.BlanketStartDate = blanketStartDate;
            this.CertificateNumber = certificateNumber;
            this.Comments = comments;
            this.CustomsDeclaredValue = customsDeclaredValue;
            this.DeclarationStatement = declarationStatement;
            this.FreightCharge = freightCharge;
            this.FromCustomsReference = fromCustomsReference;
            this.HandlingCosts = handlingCosts;
            this.ImporterCustomsReference = importerCustomsReference;
            this.InsuredAmount = insuredAmount;
            this.InsuredNumber = insuredNumber;
            this.InvoiceNumber = invoiceNumber;
            this.LicenseNumber = licenseNumber;
            this.OtherCharge = otherCharge;
            this.OtherDescription = otherDescription;
            this.OtherType = otherType;
            this.PackingCosts = packingCosts;
            this.ProducerSpecification = producerSpecification;
            this.ReasonForExport = reasonForExport;
            this.ReasonForExportExplanation = reasonForExportExplanation;
            this.SdrValue = sdrValue;
            this.ShippingDocumentType = shippingDocumentType;
            this.SignatureContact = signatureContact;
            this.TermsOfSale = termsOfSale;
        }
        
        /// <summary>
        /// Gets or Sets EELPFC
        /// </summary>
        [DataMember(Name="EELPFC", EmitDefaultValue=false)]
        public string EELPFC { get; set; }

        /// <summary>
        /// format: YYYY-MM-DD
        /// </summary>
        /// <value>format: YYYY-MM-DD</value>
        [DataMember(Name="blanketEndDate", EmitDefaultValue=false)]
        public string BlanketEndDate { get; set; }

        /// <summary>
        /// format: YYYY-MM-DD
        /// </summary>
        /// <value>format: YYYY-MM-DD</value>
        [DataMember(Name="blanketStartDate", EmitDefaultValue=false)]
        public string BlanketStartDate { get; set; }

        /// <summary>
        /// Gets or Sets CertificateNumber
        /// </summary>
        [DataMember(Name="certificateNumber", EmitDefaultValue=false)]
        public string CertificateNumber { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// ISO-4217
        /// </summary>
        /// <value>ISO-4217</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomsDeclaredValue
        /// </summary>
        [DataMember(Name="customsDeclaredValue", EmitDefaultValue=false)]
        public decimal CustomsDeclaredValue { get; set; }

        /// <summary>
        /// Gets or Sets DeclarationStatement
        /// </summary>
        [DataMember(Name="declarationStatement", EmitDefaultValue=false)]
        public string DeclarationStatement { get; set; }

        /// <summary>
        /// Gets or Sets FreightCharge
        /// </summary>
        [DataMember(Name="freightCharge", EmitDefaultValue=false)]
        public decimal FreightCharge { get; set; }

        /// <summary>
        /// Gets or Sets FromCustomsReference
        /// </summary>
        [DataMember(Name="fromCustomsReference", EmitDefaultValue=false)]
        public string FromCustomsReference { get; set; }

        /// <summary>
        /// Gets or Sets HandlingCosts
        /// </summary>
        [DataMember(Name="handlingCosts", EmitDefaultValue=false)]
        public decimal HandlingCosts { get; set; }

        /// <summary>
        /// Gets or Sets ImporterCustomsReference
        /// </summary>
        [DataMember(Name="importerCustomsReference", EmitDefaultValue=false)]
        public string ImporterCustomsReference { get; set; }

        /// <summary>
        /// Gets or Sets InsuredAmount
        /// </summary>
        [DataMember(Name="insuredAmount", EmitDefaultValue=false)]
        public decimal InsuredAmount { get; set; }

        /// <summary>
        /// Gets or Sets InsuredNumber
        /// </summary>
        [DataMember(Name="insuredNumber", EmitDefaultValue=false)]
        public string InsuredNumber { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceNumber
        /// </summary>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets LicenseNumber
        /// </summary>
        [DataMember(Name="licenseNumber", EmitDefaultValue=false)]
        public string LicenseNumber { get; set; }

        /// <summary>
        /// Gets or Sets OtherCharge
        /// </summary>
        [DataMember(Name="otherCharge", EmitDefaultValue=false)]
        public decimal OtherCharge { get; set; }

        /// <summary>
        /// Gets or Sets OtherDescription
        /// </summary>
        [DataMember(Name="otherDescription", EmitDefaultValue=false)]
        public string OtherDescription { get; set; }


        /// <summary>
        /// Gets or Sets PackingCosts
        /// </summary>
        [DataMember(Name="packingCosts", EmitDefaultValue=false)]
        public decimal PackingCosts { get; set; }



        /// <summary>
        /// Gets or Sets ReasonForExportExplanation
        /// </summary>
        [DataMember(Name="reasonForExportExplanation", EmitDefaultValue=false)]
        public string ReasonForExportExplanation { get; set; }

        /// <summary>
        /// Gets or Sets SdrValue
        /// </summary>
        [DataMember(Name="sdrValue", EmitDefaultValue=false)]
        public decimal SdrValue { get; set; }


        /// <summary>
        /// Gets or Sets SignatureContact
        /// </summary>
        [DataMember(Name="signatureContact", EmitDefaultValue=false)]
        public Address SignatureContact { get; set; }

        /// <summary>
        /// Gets or Sets TermsOfSale
        /// </summary>
        [DataMember(Name="termsOfSale", EmitDefaultValue=false)]
        public string TermsOfSale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomsInfo {\n");
            sb.Append("  EELPFC: ").Append(EELPFC).Append("\n");
            sb.Append("  BlanketEndDate: ").Append(BlanketEndDate).Append("\n");
            sb.Append("  BlanketStartDate: ").Append(BlanketStartDate).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomsDeclaredValue: ").Append(CustomsDeclaredValue).Append("\n");
            sb.Append("  DeclarationStatement: ").Append(DeclarationStatement).Append("\n");
            sb.Append("  FreightCharge: ").Append(FreightCharge).Append("\n");
            sb.Append("  FromCustomsReference: ").Append(FromCustomsReference).Append("\n");
            sb.Append("  HandlingCosts: ").Append(HandlingCosts).Append("\n");
            sb.Append("  ImporterCustomsReference: ").Append(ImporterCustomsReference).Append("\n");
            sb.Append("  InsuredAmount: ").Append(InsuredAmount).Append("\n");
            sb.Append("  InsuredNumber: ").Append(InsuredNumber).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  OtherCharge: ").Append(OtherCharge).Append("\n");
            sb.Append("  OtherDescription: ").Append(OtherDescription).Append("\n");
            sb.Append("  OtherType: ").Append(OtherType).Append("\n");
            sb.Append("  PackingCosts: ").Append(PackingCosts).Append("\n");
            sb.Append("  ProducerSpecification: ").Append(ProducerSpecification).Append("\n");
            sb.Append("  ReasonForExport: ").Append(ReasonForExport).Append("\n");
            sb.Append("  ReasonForExportExplanation: ").Append(ReasonForExportExplanation).Append("\n");
            sb.Append("  SdrValue: ").Append(SdrValue).Append("\n");
            sb.Append("  ShippingDocumentType: ").Append(ShippingDocumentType).Append("\n");
            sb.Append("  SignatureContact: ").Append(SignatureContact).Append("\n");
            sb.Append("  TermsOfSale: ").Append(TermsOfSale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomsInfo);
        }

        /// <summary>
        /// Returns true if CustomsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomsInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EELPFC == input.EELPFC ||
                    (this.EELPFC != null &&
                    this.EELPFC.Equals(input.EELPFC))
                ) && 
                (
                    this.BlanketEndDate == input.BlanketEndDate ||
                    (this.BlanketEndDate != null &&
                    this.BlanketEndDate.Equals(input.BlanketEndDate))
                ) && 
                (
                    this.BlanketStartDate == input.BlanketStartDate ||
                    (this.BlanketStartDate != null &&
                    this.BlanketStartDate.Equals(input.BlanketStartDate))
                ) && 
                (
                    this.CertificateNumber == input.CertificateNumber ||
                    (this.CertificateNumber != null &&
                    this.CertificateNumber.Equals(input.CertificateNumber))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CustomsDeclaredValue == input.CustomsDeclaredValue ||
                    (this.CustomsDeclaredValue != null &&
                    this.CustomsDeclaredValue.Equals(input.CustomsDeclaredValue))
                ) && 
                (
                    this.DeclarationStatement == input.DeclarationStatement ||
                    (this.DeclarationStatement != null &&
                    this.DeclarationStatement.Equals(input.DeclarationStatement))
                ) && 
                (
                    this.FreightCharge == input.FreightCharge ||
                    (this.FreightCharge != null &&
                    this.FreightCharge.Equals(input.FreightCharge))
                ) && 
                (
                    this.FromCustomsReference == input.FromCustomsReference ||
                    (this.FromCustomsReference != null &&
                    this.FromCustomsReference.Equals(input.FromCustomsReference))
                ) && 
                (
                    this.HandlingCosts == input.HandlingCosts ||
                    (this.HandlingCosts != null &&
                    this.HandlingCosts.Equals(input.HandlingCosts))
                ) && 
                (
                    this.ImporterCustomsReference == input.ImporterCustomsReference ||
                    (this.ImporterCustomsReference != null &&
                    this.ImporterCustomsReference.Equals(input.ImporterCustomsReference))
                ) && 
                (
                    this.InsuredAmount == input.InsuredAmount ||
                    (this.InsuredAmount != null &&
                    this.InsuredAmount.Equals(input.InsuredAmount))
                ) && 
                (
                    this.InsuredNumber == input.InsuredNumber ||
                    (this.InsuredNumber != null &&
                    this.InsuredNumber.Equals(input.InsuredNumber))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.LicenseNumber == input.LicenseNumber ||
                    (this.LicenseNumber != null &&
                    this.LicenseNumber.Equals(input.LicenseNumber))
                ) && 
                (
                    this.OtherCharge == input.OtherCharge ||
                    (this.OtherCharge != null &&
                    this.OtherCharge.Equals(input.OtherCharge))
                ) && 
                (
                    this.OtherDescription == input.OtherDescription ||
                    (this.OtherDescription != null &&
                    this.OtherDescription.Equals(input.OtherDescription))
                ) && 
                (
                    this.OtherType == input.OtherType ||
                    (this.OtherType != null &&
                    this.OtherType.Equals(input.OtherType))
                ) && 
                (
                    this.PackingCosts == input.PackingCosts ||
                    (this.PackingCosts != null &&
                    this.PackingCosts.Equals(input.PackingCosts))
                ) && 
                (
                    this.ProducerSpecification == input.ProducerSpecification ||
                    (this.ProducerSpecification != null &&
                    this.ProducerSpecification.Equals(input.ProducerSpecification))
                ) && 
                (
                    this.ReasonForExport == input.ReasonForExport ||
                    (this.ReasonForExport != null &&
                    this.ReasonForExport.Equals(input.ReasonForExport))
                ) && 
                (
                    this.ReasonForExportExplanation == input.ReasonForExportExplanation ||
                    (this.ReasonForExportExplanation != null &&
                    this.ReasonForExportExplanation.Equals(input.ReasonForExportExplanation))
                ) && 
                (
                    this.SdrValue == input.SdrValue ||
                    (this.SdrValue != null &&
                    this.SdrValue.Equals(input.SdrValue))
                ) && 
                (
                    this.ShippingDocumentType == input.ShippingDocumentType ||
                    (this.ShippingDocumentType != null &&
                    this.ShippingDocumentType.Equals(input.ShippingDocumentType))
                ) && 
                (
                    this.SignatureContact == input.SignatureContact ||
                    (this.SignatureContact != null &&
                    this.SignatureContact.Equals(input.SignatureContact))
                ) && 
                (
                    this.TermsOfSale == input.TermsOfSale ||
                    (this.TermsOfSale != null &&
                    this.TermsOfSale.Equals(input.TermsOfSale))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EELPFC != null)
                    hashCode = hashCode * 59 + this.EELPFC.GetHashCode();
                if (this.BlanketEndDate != null)
                    hashCode = hashCode * 59 + this.BlanketEndDate.GetHashCode();
                if (this.BlanketStartDate != null)
                    hashCode = hashCode * 59 + this.BlanketStartDate.GetHashCode();
                if (this.CertificateNumber != null)
                    hashCode = hashCode * 59 + this.CertificateNumber.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.CustomsDeclaredValue != null)
                    hashCode = hashCode * 59 + this.CustomsDeclaredValue.GetHashCode();
                if (this.DeclarationStatement != null)
                    hashCode = hashCode * 59 + this.DeclarationStatement.GetHashCode();
                if (this.FreightCharge != null)
                    hashCode = hashCode * 59 + this.FreightCharge.GetHashCode();
                if (this.FromCustomsReference != null)
                    hashCode = hashCode * 59 + this.FromCustomsReference.GetHashCode();
                if (this.HandlingCosts != null)
                    hashCode = hashCode * 59 + this.HandlingCosts.GetHashCode();
                if (this.ImporterCustomsReference != null)
                    hashCode = hashCode * 59 + this.ImporterCustomsReference.GetHashCode();
                if (this.InsuredAmount != null)
                    hashCode = hashCode * 59 + this.InsuredAmount.GetHashCode();
                if (this.InsuredNumber != null)
                    hashCode = hashCode * 59 + this.InsuredNumber.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.LicenseNumber != null)
                    hashCode = hashCode * 59 + this.LicenseNumber.GetHashCode();
                if (this.OtherCharge != null)
                    hashCode = hashCode * 59 + this.OtherCharge.GetHashCode();
                if (this.OtherDescription != null)
                    hashCode = hashCode * 59 + this.OtherDescription.GetHashCode();
                if (this.OtherType != null)
                    hashCode = hashCode * 59 + this.OtherType.GetHashCode();
                if (this.PackingCosts != null)
                    hashCode = hashCode * 59 + this.PackingCosts.GetHashCode();
                if (this.ProducerSpecification != null)
                    hashCode = hashCode * 59 + this.ProducerSpecification.GetHashCode();
                if (this.ReasonForExport != null)
                    hashCode = hashCode * 59 + this.ReasonForExport.GetHashCode();
                if (this.ReasonForExportExplanation != null)
                    hashCode = hashCode * 59 + this.ReasonForExportExplanation.GetHashCode();
                if (this.SdrValue != null)
                    hashCode = hashCode * 59 + this.SdrValue.GetHashCode();
                if (this.ShippingDocumentType != null)
                    hashCode = hashCode * 59 + this.ShippingDocumentType.GetHashCode();
                if (this.SignatureContact != null)
                    hashCode = hashCode * 59 + this.SignatureContact.GetHashCode();
                if (this.TermsOfSale != null)
                    hashCode = hashCode * 59 + this.TermsOfSale.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
