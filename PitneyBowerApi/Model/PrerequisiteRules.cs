/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// PrerequisiteRules
    /// </summary>
    [DataContract]
    public partial class PrerequisiteRules :  IEquatable<PrerequisiteRules>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets SpecialServiceCodes
        /// </summary>
        [DataMember(Name="specialServiceCodes", EmitDefaultValue=false)]
        public SpecialServiceCodes? SpecialServiceCodes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrerequisiteRules" /> class.
        /// </summary>
        /// <param name="specialServiceCodes">specialServiceCodes.</param>
        /// <param name="minInputValue">minInputValue.</param>
        public PrerequisiteRules(SpecialServiceCodes? specialServiceCodes = default(SpecialServiceCodes?), decimal minInputValue = default(decimal))
        {
            this.SpecialServiceCodes = specialServiceCodes;
            this.MinInputValue = minInputValue;
        }
        

        /// <summary>
        /// Gets or Sets MinInputValue
        /// </summary>
        [DataMember(Name="minInputValue", EmitDefaultValue=false)]
        public decimal MinInputValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrerequisiteRules {\n");
            sb.Append("  SpecialServiceCodes: ").Append(SpecialServiceCodes).Append("\n");
            sb.Append("  MinInputValue: ").Append(MinInputValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrerequisiteRules);
        }

        /// <summary>
        /// Returns true if PrerequisiteRules instances are equal
        /// </summary>
        /// <param name="input">Instance of PrerequisiteRules to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrerequisiteRules input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SpecialServiceCodes == input.SpecialServiceCodes ||
                    (this.SpecialServiceCodes != null &&
                    this.SpecialServiceCodes.Equals(input.SpecialServiceCodes))
                ) && 
                (
                    this.MinInputValue == input.MinInputValue ||
                    (this.MinInputValue != null &&
                    this.MinInputValue.Equals(input.MinInputValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SpecialServiceCodes != null)
                    hashCode = hashCode * 59 + this.SpecialServiceCodes.GetHashCode();
                if (this.MinInputValue != null)
                    hashCode = hashCode * 59 + this.MinInputValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
