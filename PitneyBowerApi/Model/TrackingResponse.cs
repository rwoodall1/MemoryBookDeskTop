/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// TrackingResponse
    /// </summary>
    [DataContract]
    public partial class TrackingResponse :  IEquatable<TrackingResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum InTransit for value: In Transit
            /// </summary>
            [EnumMember(Value = "In Transit")]
            InTransit = 1,

            /// <summary>
            /// Enum Delivered for value: Delivered
            /// </summary>
            [EnumMember(Value = "Delivered")]
            Delivered = 2,

            /// <summary>
            /// Enum Manifest for value: Manifest
            /// </summary>
            [EnumMember(Value = "Manifest")]
            Manifest = 3,

            /// <summary>
            /// Enum OutForDelivery for value: OutForDelivery
            /// </summary>
            [EnumMember(Value = "OutForDelivery")]
            OutForDelivery = 4,

            /// <summary>
            /// Enum Acceptance for value: Acceptance
            /// </summary>
            [EnumMember(Value = "Acceptance")]
            Acceptance = 5,

            /// <summary>
            /// Enum Acceptance for value: DeliveryAttempt
            /// </summary>
            [EnumMember(Value = "DeliveryAttempt")]
            DeliveryAttempt = 6,

            /// <summary>
            /// Enum Acceptance for value: Exception
            /// </summary>
            [EnumMember(Value = "Exception")]
            Exception = 7,

            /// <summary>
            /// Enum Acceptance for value: PickedUp
            /// </summary>
            [EnumMember(Value = "PickedUp")]
            PickedUp = 8,

            /// <summary>
            /// Enum Acceptance for value: PickupMissed
            /// </summary>
            [EnumMember(Value = "PickupMissed")]
            PickupMissed = 9,

            /// <summary>
            /// Enum Acceptance for value: ReadyForPickup
            /// </summary>
            [EnumMember(Value = "ReadyForPickup")]
            ReadyForPickup = 10,
            /// <summary>
            /// Enum Acceptance for value: ReturnToSender
            /// </summary>
            [EnumMember(Value = "ReturnToSender")]
            ReturnToSender = 11,

        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines WeightOUM
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WeightOUMEnum
        {
            /// <summary>
            /// Enum LBS for value: LBS
            /// </summary>
            [EnumMember(Value = "LBS")]
            LBS = 1,

            /// <summary>
            /// Enum KGS for value: KGS
            /// </summary>
            [EnumMember(Value = "KGS")]
            KGS = 2

        }

        /// <summary>
        /// Gets or Sets WeightOUM
        /// </summary>
        [DataMember(Name="weightOUM", EmitDefaultValue=false)]
        public WeightOUMEnum? WeightOUM { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingResponse" /> class.
        /// </summary>
        /// <param name="packageCount">packageCount.</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="referenceNumber">referenceNumber.</param>
        /// <param name="status">status.</param>
        /// <param name="updatedDate">updatedDate.</param>
        /// <param name="updatedTime">updatedTime.</param>
        /// <param name="shipDate">shipDate.</param>
        /// <param name="estimatedDeliveryDate">estimatedDeliveryDate.</param>
        /// <param name="estimatedDeliveryTime">estimatedDeliveryTime.</param>
        /// <param name="deliveryDate">deliveryDate.</param>
        /// <param name="deliveryTime">deliveryTime.</param>
        /// <param name="deliveryLocation">deliveryLocation.</param>
        /// <param name="deliveryLocationDescription">deliveryLocationDescription.</param>
        /// <param name="signedBy">signedBy.</param>
        /// <param name="weight">weight.</param>
        /// <param name="weightOUM">weightOUM.</param>
        /// <param name="reattemptDate">reattemptDate.</param>
        /// <param name="reattemptTime">reattemptTime.</param>
        /// <param name="destinationAddress">destinationAddress.</param>
        /// <param name="senderAddress">senderAddress.</param>
        /// <param name="scanDetailsList">scanDetailsList.</param>
        public TrackingResponse(int packageCount = default(int), string carrier = default(string), string trackingNumber = default(string), string referenceNumber = default(string), StatusEnum? status = default(StatusEnum?), string updatedDate = default(string), string updatedTime = default(string), string shipDate = default(string), string estimatedDeliveryDate = default(string), string estimatedDeliveryTime = default(string), string deliveryDate = default(string), string deliveryTime = default(string), string deliveryLocation = default(string), string deliveryLocationDescription = default(string), string signedBy = default(string), double weight = default(int), WeightOUMEnum? weightOUM = default(WeightOUMEnum?), string reattemptDate = default(string), string reattemptTime = default(string), TrackingAddress destinationAddress = default(TrackingAddress), TrackingAddress senderAddress = default(TrackingAddress), List<TrackingResponseScanDetailsList> scanDetailsList = default(List<TrackingResponseScanDetailsList>))
        {
            this.PackageCount = packageCount;
            this.Carrier = carrier;
            this.TrackingNumber = trackingNumber;
            this.ReferenceNumber = referenceNumber;
            this.Status = status;
            this.UpdatedDate = updatedDate;
            this.UpdatedTime = updatedTime;
            this.ShipDate = shipDate;
            this.EstimatedDeliveryDate = estimatedDeliveryDate;
            this.EstimatedDeliveryTime = estimatedDeliveryTime;
            this.DeliveryDate = deliveryDate;
            this.DeliveryTime = deliveryTime;
            this.DeliveryLocation = deliveryLocation;
            this.DeliveryLocationDescription = deliveryLocationDescription;
            this.SignedBy = signedBy;
            this.Weight = weight;
            this.WeightOUM = weightOUM;
            this.ReattemptDate = reattemptDate;
            this.ReattemptTime = reattemptTime;
            this.DestinationAddress = destinationAddress;
            this.SenderAddress = senderAddress;
            this.ScanDetailsList = scanDetailsList;
        }
        
        /// <summary>
        /// Gets or Sets PackageCount
        /// </summary>
        [DataMember(Name="packageCount", EmitDefaultValue=false)]
        public int PackageCount { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name="trackingNumber", EmitDefaultValue=false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceNumber
        /// </summary>
        [DataMember(Name="referenceNumber", EmitDefaultValue=false)]
        public string ReferenceNumber { get; set; }


        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="updatedDate", EmitDefaultValue=false)]
        public string UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedTime
        /// </summary>
        [DataMember(Name="updatedTime", EmitDefaultValue=false)]
        public string UpdatedTime { get; set; }

        /// <summary>
        /// Gets or Sets ShipDate
        /// </summary>
        [DataMember(Name="shipDate", EmitDefaultValue=false)]
        public string ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedDeliveryDate
        /// </summary>
        [DataMember(Name="estimatedDeliveryDate", EmitDefaultValue=false)]
        public string EstimatedDeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets EstimatedDeliveryTime
        /// </summary>
        [DataMember(Name="estimatedDeliveryTime", EmitDefaultValue=false)]
        public string EstimatedDeliveryTime { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryDate
        /// </summary>
        [DataMember(Name="deliveryDate", EmitDefaultValue=false)]
        public string DeliveryDate { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryTime
        /// </summary>
        [DataMember(Name="deliveryTime", EmitDefaultValue=false)]
        public string DeliveryTime { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryLocation
        /// </summary>
        [DataMember(Name="deliveryLocation", EmitDefaultValue=false)]
        public string DeliveryLocation { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryLocationDescription
        /// </summary>
        [DataMember(Name="deliveryLocationDescription", EmitDefaultValue=false)]
        public string DeliveryLocationDescription { get; set; }

        /// <summary>
        /// Gets or Sets SignedBy
        /// </summary>
        [DataMember(Name="signedBy", EmitDefaultValue=false)]
        public string SignedBy { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public double Weight { get; set; }


        /// <summary>
        /// Gets or Sets ReattemptDate
        /// </summary>
        [DataMember(Name="reattemptDate", EmitDefaultValue=false)]
        public string ReattemptDate { get; set; }

        /// <summary>
        /// Gets or Sets ReattemptTime
        /// </summary>
        [DataMember(Name="reattemptTime", EmitDefaultValue=false)]
        public string ReattemptTime { get; set; }

        /// <summary>
        /// Gets or Sets DestinationAddress
        /// </summary>
        [DataMember(Name="destinationAddress", EmitDefaultValue=false)]
        public TrackingAddress DestinationAddress { get; set; }

        /// <summary>
        /// Gets or Sets SenderAddress
        /// </summary>
        [DataMember(Name="senderAddress", EmitDefaultValue=false)]
        public TrackingAddress SenderAddress { get; set; }

        /// <summary>
        /// Gets or Sets ScanDetailsList
        /// </summary>
        [DataMember(Name="scanDetailsList", EmitDefaultValue=false)]
        public List<TrackingResponseScanDetailsList> ScanDetailsList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingResponse {\n");
            sb.Append("  PackageCount: ").Append(PackageCount).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  ReferenceNumber: ").Append(ReferenceNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  EstimatedDeliveryDate: ").Append(EstimatedDeliveryDate).Append("\n");
            sb.Append("  EstimatedDeliveryTime: ").Append(EstimatedDeliveryTime).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  DeliveryLocation: ").Append(DeliveryLocation).Append("\n");
            sb.Append("  DeliveryLocationDescription: ").Append(DeliveryLocationDescription).Append("\n");
            sb.Append("  SignedBy: ").Append(SignedBy).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  WeightOUM: ").Append(WeightOUM).Append("\n");
            sb.Append("  ReattemptDate: ").Append(ReattemptDate).Append("\n");
            sb.Append("  ReattemptTime: ").Append(ReattemptTime).Append("\n");
            sb.Append("  DestinationAddress: ").Append(DestinationAddress).Append("\n");
            sb.Append("  SenderAddress: ").Append(SenderAddress).Append("\n");
            sb.Append("  ScanDetailsList: ").Append(ScanDetailsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrackingResponse);
        }

        /// <summary>
        /// Returns true if TrackingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PackageCount == input.PackageCount ||
                    (this.PackageCount != null &&
                    this.PackageCount.Equals(input.PackageCount))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.ReferenceNumber == input.ReferenceNumber ||
                    (this.ReferenceNumber != null &&
                    this.ReferenceNumber.Equals(input.ReferenceNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.UpdatedTime == input.UpdatedTime ||
                    (this.UpdatedTime != null &&
                    this.UpdatedTime.Equals(input.UpdatedTime))
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.EstimatedDeliveryDate == input.EstimatedDeliveryDate ||
                    (this.EstimatedDeliveryDate != null &&
                    this.EstimatedDeliveryDate.Equals(input.EstimatedDeliveryDate))
                ) && 
                (
                    this.EstimatedDeliveryTime == input.EstimatedDeliveryTime ||
                    (this.EstimatedDeliveryTime != null &&
                    this.EstimatedDeliveryTime.Equals(input.EstimatedDeliveryTime))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    (this.DeliveryTime != null &&
                    this.DeliveryTime.Equals(input.DeliveryTime))
                ) && 
                (
                    this.DeliveryLocation == input.DeliveryLocation ||
                    (this.DeliveryLocation != null &&
                    this.DeliveryLocation.Equals(input.DeliveryLocation))
                ) && 
                (
                    this.DeliveryLocationDescription == input.DeliveryLocationDescription ||
                    (this.DeliveryLocationDescription != null &&
                    this.DeliveryLocationDescription.Equals(input.DeliveryLocationDescription))
                ) && 
                (
                    this.SignedBy == input.SignedBy ||
                    (this.SignedBy != null &&
                    this.SignedBy.Equals(input.SignedBy))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.WeightOUM == input.WeightOUM ||
                    (this.WeightOUM != null &&
                    this.WeightOUM.Equals(input.WeightOUM))
                ) && 
                (
                    this.ReattemptDate == input.ReattemptDate ||
                    (this.ReattemptDate != null &&
                    this.ReattemptDate.Equals(input.ReattemptDate))
                ) && 
                (
                    this.ReattemptTime == input.ReattemptTime ||
                    (this.ReattemptTime != null &&
                    this.ReattemptTime.Equals(input.ReattemptTime))
                ) && 
                (
                    this.DestinationAddress == input.DestinationAddress ||
                    (this.DestinationAddress != null &&
                    this.DestinationAddress.Equals(input.DestinationAddress))
                ) && 
                (
                    this.SenderAddress == input.SenderAddress ||
                    (this.SenderAddress != null &&
                    this.SenderAddress.Equals(input.SenderAddress))
                ) && 
                (
                    this.ScanDetailsList == input.ScanDetailsList ||
                    this.ScanDetailsList != null &&
                    input.ScanDetailsList != null &&
                    this.ScanDetailsList.SequenceEqual(input.ScanDetailsList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageCount != null)
                    hashCode = hashCode * 59 + this.PackageCount.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.TrackingNumber != null)
                    hashCode = hashCode * 59 + this.TrackingNumber.GetHashCode();
                if (this.ReferenceNumber != null)
                    hashCode = hashCode * 59 + this.ReferenceNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                if (this.UpdatedTime != null)
                    hashCode = hashCode * 59 + this.UpdatedTime.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.EstimatedDeliveryDate != null)
                    hashCode = hashCode * 59 + this.EstimatedDeliveryDate.GetHashCode();
                if (this.EstimatedDeliveryTime != null)
                    hashCode = hashCode * 59 + this.EstimatedDeliveryTime.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.DeliveryTime != null)
                    hashCode = hashCode * 59 + this.DeliveryTime.GetHashCode();
                if (this.DeliveryLocation != null)
                    hashCode = hashCode * 59 + this.DeliveryLocation.GetHashCode();
                if (this.DeliveryLocationDescription != null)
                    hashCode = hashCode * 59 + this.DeliveryLocationDescription.GetHashCode();
                if (this.SignedBy != null)
                    hashCode = hashCode * 59 + this.SignedBy.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.WeightOUM != null)
                    hashCode = hashCode * 59 + this.WeightOUM.GetHashCode();
                if (this.ReattemptDate != null)
                    hashCode = hashCode * 59 + this.ReattemptDate.GetHashCode();
                if (this.ReattemptTime != null)
                    hashCode = hashCode * 59 + this.ReattemptTime.GetHashCode();
                if (this.DestinationAddress != null)
                    hashCode = hashCode * 59 + this.DestinationAddress.GetHashCode();
                if (this.SenderAddress != null)
                    hashCode = hashCode * 59 + this.SenderAddress.GetHashCode();
                if (this.ScanDetailsList != null)
                    hashCode = hashCode * 59 + this.ScanDetailsList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
