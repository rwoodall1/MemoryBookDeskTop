/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesRequestPricingCodPrice
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesRequestPricingCodPrice :  IEquatable<CrossBorderQuotesRequestPricingCodPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequestPricingCodPrice" /> class.
        /// </summary>
        /// <param name="price">price.</param>
        /// <param name="cod">cod.</param>
        /// <param name="includesDuty">includesDuty.</param>
        /// <param name="includesTaxes">includesTaxes.</param>
        public CrossBorderQuotesRequestPricingCodPrice(int price = default(int), string cod = default(string), bool includesDuty = default(bool), bool includesTaxes = default(bool))
        {
            this.Price = price;
            this.Cod = cod;
            this.IncludesDuty = includesDuty;
            this.IncludesTaxes = includesTaxes;
        }
        
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public int Price { get; set; }

        /// <summary>
        /// Gets or Sets Cod
        /// </summary>
        [DataMember(Name="cod", EmitDefaultValue=false)]
        public string Cod { get; set; }

        /// <summary>
        /// Gets or Sets IncludesDuty
        /// </summary>
        [DataMember(Name="includesDuty", EmitDefaultValue=false)]
        public bool IncludesDuty { get; set; }

        /// <summary>
        /// Gets or Sets IncludesTaxes
        /// </summary>
        [DataMember(Name="includesTaxes", EmitDefaultValue=false)]
        public bool IncludesTaxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesRequestPricingCodPrice {\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Cod: ").Append(Cod).Append("\n");
            sb.Append("  IncludesDuty: ").Append(IncludesDuty).Append("\n");
            sb.Append("  IncludesTaxes: ").Append(IncludesTaxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesRequestPricingCodPrice);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesRequestPricingCodPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesRequestPricingCodPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesRequestPricingCodPrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Cod == input.Cod ||
                    (this.Cod != null &&
                    this.Cod.Equals(input.Cod))
                ) && 
                (
                    this.IncludesDuty == input.IncludesDuty ||
                    (this.IncludesDuty != null &&
                    this.IncludesDuty.Equals(input.IncludesDuty))
                ) && 
                (
                    this.IncludesTaxes == input.IncludesTaxes ||
                    (this.IncludesTaxes != null &&
                    this.IncludesTaxes.Equals(input.IncludesTaxes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Cod != null)
                    hashCode = hashCode * 59 + this.Cod.GetHashCode();
                if (this.IncludesDuty != null)
                    hashCode = hashCode * 59 + this.IncludesDuty.GetHashCode();
                if (this.IncludesTaxes != null)
                    hashCode = hashCode * 59 + this.IncludesTaxes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
