/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// Customs
    /// </summary>
    [DataContract]
    public partial class Customs :  IEquatable<Customs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customs" /> class.
        /// </summary>
        /// <param name="customsInfo">customsInfo.</param>
        /// <param name="customsItems">customsItems.</param>
        public Customs(CustomsInfo customsInfo = default(CustomsInfo), List<CustomsItem> customsItems = default(List<CustomsItem>))
        {
            this.CustomsInfo = customsInfo;
            this.CustomsItems = customsItems;
        }
        
        /// <summary>
        /// Gets or Sets CustomsInfo
        /// </summary>
        [DataMember(Name="customsInfo", EmitDefaultValue=false)]
        public CustomsInfo CustomsInfo { get; set; }

        /// <summary>
        /// Gets or Sets CustomsItems
        /// </summary>
        [DataMember(Name="customsItems", EmitDefaultValue=false)]
        public List<CustomsItem> CustomsItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Customs {\n");
            sb.Append("  CustomsInfo: ").Append(CustomsInfo).Append("\n");
            sb.Append("  CustomsItems: ").Append(CustomsItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Customs);
        }

        /// <summary>
        /// Returns true if Customs instances are equal
        /// </summary>
        /// <param name="input">Instance of Customs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Customs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomsInfo == input.CustomsInfo ||
                    (this.CustomsInfo != null &&
                    this.CustomsInfo.Equals(input.CustomsInfo))
                ) && 
                (
                    this.CustomsItems == input.CustomsItems ||
                    this.CustomsItems != null &&
                    input.CustomsItems != null &&
                    this.CustomsItems.SequenceEqual(input.CustomsItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomsInfo != null)
                    hashCode = hashCode * 59 + this.CustomsInfo.GetHashCode();
                if (this.CustomsItems != null)
                    hashCode = hashCode * 59 + this.CustomsItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
