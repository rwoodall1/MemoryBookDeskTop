/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesErrorsQuoteLines
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesErrorsQuoteLines :  IEquatable<CrossBorderQuotesErrorsQuoteLines>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesErrorsQuoteLines" /> class.
        /// </summary>
        /// <param name="lineId">lineId.</param>
        /// <param name="merchantComRefId">merchantComRefId.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitErrors">unitErrors.</param>
        public CrossBorderQuotesErrorsQuoteLines(string lineId = default(string), string merchantComRefId = default(string), int quantity = default(int), List<CrossBorderQuotesErrorsUnitErrors> unitErrors = default(List<CrossBorderQuotesErrorsUnitErrors>))
        {
            this.LineId = lineId;
            this.MerchantComRefId = merchantComRefId;
            this.Quantity = quantity;
            this.UnitErrors = unitErrors;
        }
        
        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantComRefId
        /// </summary>
        [DataMember(Name="merchantComRefId", EmitDefaultValue=false)]
        public string MerchantComRefId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitErrors
        /// </summary>
        [DataMember(Name="unitErrors", EmitDefaultValue=false)]
        public List<CrossBorderQuotesErrorsUnitErrors> UnitErrors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesErrorsQuoteLines {\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("  MerchantComRefId: ").Append(MerchantComRefId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitErrors: ").Append(UnitErrors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesErrorsQuoteLines);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesErrorsQuoteLines instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesErrorsQuoteLines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesErrorsQuoteLines input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                ) && 
                (
                    this.MerchantComRefId == input.MerchantComRefId ||
                    (this.MerchantComRefId != null &&
                    this.MerchantComRefId.Equals(input.MerchantComRefId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitErrors == input.UnitErrors ||
                    this.UnitErrors != null &&
                    input.UnitErrors != null &&
                    this.UnitErrors.SequenceEqual(input.UnitErrors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                if (this.MerchantComRefId != null)
                    hashCode = hashCode * 59 + this.MerchantComRefId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitErrors != null)
                    hashCode = hashCode * 59 + this.UnitErrors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
