/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesRequest
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesRequest :  IEquatable<CrossBorderQuotesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CrossBorderQuotesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequest" /> class.
        /// </summary>
        /// <param name="quoteCurrency">The currency to return the quote in. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR (required).</param>
        /// <param name="basketCurrency">The default currency of the basket. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR (required).</param>
        /// <param name="fromAddress">fromAddress.</param>
        /// <param name="toAddress">toAddress (required).</param>
        /// <param name="basketItems">The items in the buyer&#39;s shopping basket. (required).</param>
        /// <param name="rates">Specifies the carrier, service, parcel, and other information. In a response, this field also contains the service charges. Importatn- In a request, the rates array can contain only one rates object. (required).</param>
        /// <param name="shipmentOptions">shipmentOptions.</param>
        public CrossBorderQuotesRequest(string quoteCurrency = default(string), string basketCurrency = default(string), Address fromAddress = default(Address), Address toAddress = default(Address), List<CrossBorderQuotesRequestBasketItems> basketItems = default(List<CrossBorderQuotesRequestBasketItems>), List<CrossBorderQuotesRequestRates> rates = default(List<CrossBorderQuotesRequestRates>), List<CarrierFacilityResponseCarrierFacilityOptions> shipmentOptions = default(List<CarrierFacilityResponseCarrierFacilityOptions>))
        {
            // to ensure "quoteCurrency" is required (not null)
            if (quoteCurrency == null)
            {
                throw new InvalidDataException("quoteCurrency is a required property for CrossBorderQuotesRequest and cannot be null");
            }
            else
            {
                this.QuoteCurrency = quoteCurrency;
            }
            
            // to ensure "basketCurrency" is required (not null)
            if (basketCurrency == null)
            {
                throw new InvalidDataException("basketCurrency is a required property for CrossBorderQuotesRequest and cannot be null");
            }
            else
            {
                this.BasketCurrency = basketCurrency;
            }
            
            // to ensure "toAddress" is required (not null)
            if (toAddress == null)
            {
                throw new InvalidDataException("toAddress is a required property for CrossBorderQuotesRequest and cannot be null");
            }
            else
            {
                this.ToAddress = toAddress;
            }
            
            // to ensure "basketItems" is required (not null)
            if (basketItems == null)
            {
                throw new InvalidDataException("basketItems is a required property for CrossBorderQuotesRequest and cannot be null");
            }
            else
            {
                this.BasketItems = basketItems;
            }
            
            // to ensure "rates" is required (not null)
            if (rates == null)
            {
                throw new InvalidDataException("rates is a required property for CrossBorderQuotesRequest and cannot be null");
            }
            else
            {
                this.Rates = rates;
            }
            
            this.FromAddress = fromAddress;
            this.ShipmentOptions = shipmentOptions;
        }
        
        /// <summary>
        /// The currency to return the quote in. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR
        /// </summary>
        /// <value>The currency to return the quote in. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR</value>
        [DataMember(Name="quoteCurrency", EmitDefaultValue=true)]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// The default currency of the basket. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR
        /// </summary>
        /// <value>The default currency of the basket. Use three uppercase letters, per the ISO currency code (ISO 4217). For example- USD, CAD, or EUR</value>
        [DataMember(Name="basketCurrency", EmitDefaultValue=true)]
        public string BasketCurrency { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name="fromAddress", EmitDefaultValue=false)]
        public Address FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [DataMember(Name="toAddress", EmitDefaultValue=true)]
        public Address ToAddress { get; set; }

        /// <summary>
        /// The items in the buyer&#39;s shopping basket.
        /// </summary>
        /// <value>The items in the buyer&#39;s shopping basket.</value>
        [DataMember(Name="basketItems", EmitDefaultValue=true)]
        public List<CrossBorderQuotesRequestBasketItems> BasketItems { get; set; }

        /// <summary>
        /// Specifies the carrier, service, parcel, and other information. In a response, this field also contains the service charges. Importatn- In a request, the rates array can contain only one rates object.
        /// </summary>
        /// <value>Specifies the carrier, service, parcel, and other information. In a response, this field also contains the service charges. Importatn- In a request, the rates array can contain only one rates object.</value>
        [DataMember(Name="rates", EmitDefaultValue=true)]
        public List<CrossBorderQuotesRequestRates> Rates { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [DataMember(Name="shipmentOptions", EmitDefaultValue=false)]
        public List<CarrierFacilityResponseCarrierFacilityOptions> ShipmentOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesRequest {\n");
            sb.Append("  QuoteCurrency: ").Append(QuoteCurrency).Append("\n");
            sb.Append("  BasketCurrency: ").Append(BasketCurrency).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("  BasketItems: ").Append(BasketItems).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesRequest);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QuoteCurrency == input.QuoteCurrency ||
                    (this.QuoteCurrency != null &&
                    this.QuoteCurrency.Equals(input.QuoteCurrency))
                ) && 
                (
                    this.BasketCurrency == input.BasketCurrency ||
                    (this.BasketCurrency != null &&
                    this.BasketCurrency.Equals(input.BasketCurrency))
                ) && 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && 
                (
                    this.ToAddress == input.ToAddress ||
                    (this.ToAddress != null &&
                    this.ToAddress.Equals(input.ToAddress))
                ) && 
                (
                    this.BasketItems == input.BasketItems ||
                    this.BasketItems != null &&
                    input.BasketItems != null &&
                    this.BasketItems.SequenceEqual(input.BasketItems)
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                ) && 
                (
                    this.ShipmentOptions == input.ShipmentOptions ||
                    this.ShipmentOptions != null &&
                    input.ShipmentOptions != null &&
                    this.ShipmentOptions.SequenceEqual(input.ShipmentOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QuoteCurrency != null)
                    hashCode = hashCode * 59 + this.QuoteCurrency.GetHashCode();
                if (this.BasketCurrency != null)
                    hashCode = hashCode * 59 + this.BasketCurrency.GetHashCode();
                if (this.FromAddress != null)
                    hashCode = hashCode * 59 + this.FromAddress.GetHashCode();
                if (this.ToAddress != null)
                    hashCode = hashCode * 59 + this.ToAddress.GetHashCode();
                if (this.BasketItems != null)
                    hashCode = hashCode * 59 + this.BasketItems.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                if (this.ShipmentOptions != null)
                    hashCode = hashCode * 59 + this.ShipmentOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
