/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// SchedulePickupResponse
    /// </summary>
    [DataContract]
    public partial class SchedulePickupResponse :  IEquatable<SchedulePickupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulePickupResponse" /> class.
        /// </summary>
        /// <param name="pickupAddress">pickupAddress.</param>
        /// <param name="carrier">carrier.</param>
        /// <param name="pickupSummary">pickupSummary.</param>
        /// <param name="reference">reference.</param>
        /// <param name="packageLocation">packageLocation.</param>
        /// <param name="specialInstructions">specialInstructions.</param>
        /// <param name="pickupDateTime">pickupDateTime.</param>
        /// <param name="pickupConfirmationNumber">pickupConfirmationNumber.</param>
        /// <param name="pickupId">pickupId.</param>
        public SchedulePickupResponse(Address pickupAddress = default(Address), string carrier = default(string), List<SchedulePickupPickupSummary> pickupSummary = default(List<SchedulePickupPickupSummary>), string reference = default(string), string packageLocation = default(string), string specialInstructions = default(string), string pickupDateTime = default(string), string pickupConfirmationNumber = default(string), string pickupId = default(string))
        {
            this.PickupAddress = pickupAddress;
            this.Carrier = carrier;
            this.PickupSummary = pickupSummary;
            this.Reference = reference;
            this.PackageLocation = packageLocation;
            this.SpecialInstructions = specialInstructions;
            this.PickupDateTime = pickupDateTime;
            this.PickupConfirmationNumber = pickupConfirmationNumber;
            this.PickupId = pickupId;
        }
        
        /// <summary>
        /// Gets or Sets PickupAddress
        /// </summary>
        [DataMember(Name="pickupAddress", EmitDefaultValue=false)]
        public Address PickupAddress { get; set; }

        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=false)]
        public string Carrier { get; set; }

        /// <summary>
        /// Gets or Sets PickupSummary
        /// </summary>
        [DataMember(Name="pickupSummary", EmitDefaultValue=false)]
        public List<SchedulePickupPickupSummary> PickupSummary { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Gets or Sets PackageLocation
        /// </summary>
        [DataMember(Name="packageLocation", EmitDefaultValue=false)]
        public string PackageLocation { get; set; }

        /// <summary>
        /// Gets or Sets SpecialInstructions
        /// </summary>
        [DataMember(Name="specialInstructions", EmitDefaultValue=false)]
        public string SpecialInstructions { get; set; }

        /// <summary>
        /// Gets or Sets PickupDateTime
        /// </summary>
        [DataMember(Name="pickupDateTime", EmitDefaultValue=false)]
        public string PickupDateTime { get; set; }

        /// <summary>
        /// Gets or Sets PickupConfirmationNumber
        /// </summary>
        [DataMember(Name="pickupConfirmationNumber", EmitDefaultValue=false)]
        public string PickupConfirmationNumber { get; set; }

        /// <summary>
        /// Gets or Sets PickupId
        /// </summary>
        [DataMember(Name="pickupId", EmitDefaultValue=false)]
        public string PickupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchedulePickupResponse {\n");
            sb.Append("  PickupAddress: ").Append(PickupAddress).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  PickupSummary: ").Append(PickupSummary).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  PackageLocation: ").Append(PackageLocation).Append("\n");
            sb.Append("  SpecialInstructions: ").Append(SpecialInstructions).Append("\n");
            sb.Append("  PickupDateTime: ").Append(PickupDateTime).Append("\n");
            sb.Append("  PickupConfirmationNumber: ").Append(PickupConfirmationNumber).Append("\n");
            sb.Append("  PickupId: ").Append(PickupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SchedulePickupResponse);
        }

        /// <summary>
        /// Returns true if SchedulePickupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SchedulePickupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchedulePickupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PickupAddress == input.PickupAddress ||
                    (this.PickupAddress != null &&
                    this.PickupAddress.Equals(input.PickupAddress))
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.PickupSummary == input.PickupSummary ||
                    this.PickupSummary != null &&
                    input.PickupSummary != null &&
                    this.PickupSummary.SequenceEqual(input.PickupSummary)
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.PackageLocation == input.PackageLocation ||
                    (this.PackageLocation != null &&
                    this.PackageLocation.Equals(input.PackageLocation))
                ) && 
                (
                    this.SpecialInstructions == input.SpecialInstructions ||
                    (this.SpecialInstructions != null &&
                    this.SpecialInstructions.Equals(input.SpecialInstructions))
                ) && 
                (
                    this.PickupDateTime == input.PickupDateTime ||
                    (this.PickupDateTime != null &&
                    this.PickupDateTime.Equals(input.PickupDateTime))
                ) && 
                (
                    this.PickupConfirmationNumber == input.PickupConfirmationNumber ||
                    (this.PickupConfirmationNumber != null &&
                    this.PickupConfirmationNumber.Equals(input.PickupConfirmationNumber))
                ) && 
                (
                    this.PickupId == input.PickupId ||
                    (this.PickupId != null &&
                    this.PickupId.Equals(input.PickupId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PickupAddress != null)
                    hashCode = hashCode * 59 + this.PickupAddress.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.PickupSummary != null)
                    hashCode = hashCode * 59 + this.PickupSummary.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.PackageLocation != null)
                    hashCode = hashCode * 59 + this.PackageLocation.GetHashCode();
                if (this.SpecialInstructions != null)
                    hashCode = hashCode * 59 + this.SpecialInstructions.GetHashCode();
                if (this.PickupDateTime != null)
                    hashCode = hashCode * 59 + this.PickupDateTime.GetHashCode();
                if (this.PickupConfirmationNumber != null)
                    hashCode = hashCode * 59 + this.PickupConfirmationNumber.GetHashCode();
                if (this.PickupId != null)
                    hashCode = hashCode * 59 + this.PickupId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
