/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// AddressSuggestionResponseSuggestions
    /// </summary>
    [DataContract]
    public partial class AddressSuggestionResponseSuggestions :  IEquatable<AddressSuggestionResponseSuggestions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressSuggestionResponseSuggestions" /> class.
        /// </summary>
        /// <param name="suggestionType">suggestionType.</param>
        /// <param name="address">address.</param>
        public AddressSuggestionResponseSuggestions(string suggestionType = default(string), List<Address> address = default(List<Address>))
        {
            this.SuggestionType = suggestionType;
            this.Address = address;
        }
        
        /// <summary>
        /// Gets or Sets SuggestionType
        /// </summary>
        [DataMember(Name="suggestionType", EmitDefaultValue=false)]
        public string SuggestionType { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public List<Address> Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressSuggestionResponseSuggestions {\n");
            sb.Append("  SuggestionType: ").Append(SuggestionType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressSuggestionResponseSuggestions);
        }

        /// <summary>
        /// Returns true if AddressSuggestionResponseSuggestions instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressSuggestionResponseSuggestions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressSuggestionResponseSuggestions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SuggestionType == input.SuggestionType ||
                    (this.SuggestionType != null &&
                    this.SuggestionType.Equals(input.SuggestionType))
                ) && 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    input.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SuggestionType != null)
                    hashCode = hashCode * 59 + this.SuggestionType.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
