/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesRequestCategories
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesRequestCategories :  IEquatable<CrossBorderQuotesRequestCategories>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequestCategories" /> class.
        /// </summary>
        /// <param name="categoryCode">categoryCode.</param>
        /// <param name="descriptions">descriptions.</param>
        /// <param name="parentCategoryCode">parentCategoryCode.</param>
        /// <param name="url">url.</param>
        public CrossBorderQuotesRequestCategories(string categoryCode = default(string), List<CrossBorderQuotesRequestDescriptions> descriptions = default(List<CrossBorderQuotesRequestDescriptions>), string parentCategoryCode = default(string), string url = default(string))
        {
            this.CategoryCode = categoryCode;
            this.Descriptions = descriptions;
            this.ParentCategoryCode = parentCategoryCode;
            this.Url = url;
        }
        
        /// <summary>
        /// Gets or Sets CategoryCode
        /// </summary>
        [DataMember(Name="categoryCode", EmitDefaultValue=false)]
        public string CategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets Descriptions
        /// </summary>
        [DataMember(Name="descriptions", EmitDefaultValue=false)]
        public List<CrossBorderQuotesRequestDescriptions> Descriptions { get; set; }

        /// <summary>
        /// Gets or Sets ParentCategoryCode
        /// </summary>
        [DataMember(Name="parentCategoryCode", EmitDefaultValue=false)]
        public string ParentCategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesRequestCategories {\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Descriptions: ").Append(Descriptions).Append("\n");
            sb.Append("  ParentCategoryCode: ").Append(ParentCategoryCode).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesRequestCategories);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesRequestCategories instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesRequestCategories to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesRequestCategories input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CategoryCode == input.CategoryCode ||
                    (this.CategoryCode != null &&
                    this.CategoryCode.Equals(input.CategoryCode))
                ) && 
                (
                    this.Descriptions == input.Descriptions ||
                    this.Descriptions != null &&
                    input.Descriptions != null &&
                    this.Descriptions.SequenceEqual(input.Descriptions)
                ) && 
                (
                    this.ParentCategoryCode == input.ParentCategoryCode ||
                    (this.ParentCategoryCode != null &&
                    this.ParentCategoryCode.Equals(input.ParentCategoryCode))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CategoryCode != null)
                    hashCode = hashCode * 59 + this.CategoryCode.GetHashCode();
                if (this.Descriptions != null)
                    hashCode = hashCode * 59 + this.Descriptions.GetHashCode();
                if (this.ParentCategoryCode != null)
                    hashCode = hashCode * 59 + this.ParentCategoryCode.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
