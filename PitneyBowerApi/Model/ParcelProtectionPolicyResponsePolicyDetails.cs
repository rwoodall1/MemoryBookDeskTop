/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// ParcelProtectionPolicyResponsePolicyDetails
    /// </summary>
    [DataContract]
    public partial class ParcelProtectionPolicyResponsePolicyDetails :  IEquatable<ParcelProtectionPolicyResponsePolicyDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelProtectionPolicyResponsePolicyDetails" /> class.
        /// </summary>
        /// <param name="policyId">policyId.</param>
        /// <param name="policyDate">policyDate.</param>
        /// <param name="policyStatus">policyStatus.</param>
        /// <param name="claimStatus">claimStatus.</param>
        /// <param name="claimStatusUpdateDate">claimStatusUpdateDate.</param>
        /// <param name="valueOfGoods">valueOfGoods.</param>
        /// <param name="insuranceValue">insuranceValue.</param>
        /// <param name="premiumValue">premiumValue.</param>
        /// <param name="basePremium">basePremium.</param>
        /// <param name="technologyFee">technologyFee.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="mailClass">mailClass.</param>
        /// <param name="mailClassOption">mailClassOption.</param>
        public ParcelProtectionPolicyResponsePolicyDetails(string policyId = default(string), string policyDate = default(string), string policyStatus = default(string), string claimStatus = default(string), string claimStatusUpdateDate = default(string), decimal valueOfGoods = default(decimal), decimal insuranceValue = default(decimal), decimal premiumValue = default(decimal), decimal basePremium = default(decimal), decimal technologyFee = default(decimal), string currencyCode = default(string), string mailClass = default(string), string mailClassOption = default(string))
        {
            this.ClaimStatus = claimStatus;
            this.PolicyId = policyId;
            this.PolicyDate = policyDate;
            this.PolicyStatus = policyStatus;
            this.ClaimStatus = claimStatus;
            this.ClaimStatusUpdateDate = claimStatusUpdateDate;
            this.ValueOfGoods = valueOfGoods;
            this.InsuranceValue = insuranceValue;
            this.PremiumValue = premiumValue;
            this.BasePremium = basePremium;
            this.TechnologyFee = technologyFee;
            this.CurrencyCode = currencyCode;
            this.MailClass = mailClass;
            this.MailClassOption = mailClassOption;
        }
        
        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [DataMember(Name="policyId", EmitDefaultValue=false)]
        public string PolicyId { get; set; }

        /// <summary>
        /// Gets or Sets PolicyDate
        /// </summary>
        [DataMember(Name="policyDate", EmitDefaultValue=false)]
        public string PolicyDate { get; set; }

        /// <summary>
        /// Gets or Sets PolicyStatus
        /// </summary>
        [DataMember(Name="policyStatus", EmitDefaultValue=false)]
        public string PolicyStatus { get; set; }

        /// <summary>
        /// Gets or Sets ClaimStatus
        /// </summary>
        [DataMember(Name="claimStatus", EmitDefaultValue=true)]
        public string ClaimStatus { get; set; }

        /// <summary>
        /// Gets or Sets ClaimStatusUpdateDate
        /// </summary>
        [DataMember(Name="claimStatusUpdateDate", EmitDefaultValue=false)]
        public string ClaimStatusUpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets ValueOfGoods
        /// </summary>
        [DataMember(Name="valueOfGoods", EmitDefaultValue=false)]
        public decimal ValueOfGoods { get; set; }

        /// <summary>
        /// Gets or Sets InsuranceValue
        /// </summary>
        [DataMember(Name="insuranceValue", EmitDefaultValue=false)]
        public decimal InsuranceValue { get; set; }

        /// <summary>
        /// Gets or Sets PremiumValue
        /// </summary>
        [DataMember(Name="premiumValue", EmitDefaultValue=false)]
        public decimal PremiumValue { get; set; }

        /// <summary>
        /// Gets or Sets BasePremium
        /// </summary>
        [DataMember(Name="basePremium", EmitDefaultValue=false)]
        public decimal BasePremium { get; set; }

        /// <summary>
        /// Gets or Sets TechnologyFee
        /// </summary>
        [DataMember(Name="technologyFee", EmitDefaultValue=false)]
        public decimal TechnologyFee { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets MailClass
        /// </summary>
        [DataMember(Name="mailClass", EmitDefaultValue=false)]
        public string MailClass { get; set; }

        /// <summary>
        /// Gets or Sets MailClassOption
        /// </summary>
        [DataMember(Name="mailClassOption", EmitDefaultValue=false)]
        public string MailClassOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelProtectionPolicyResponsePolicyDetails {\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  PolicyDate: ").Append(PolicyDate).Append("\n");
            sb.Append("  PolicyStatus: ").Append(PolicyStatus).Append("\n");
            sb.Append("  ClaimStatus: ").Append(ClaimStatus).Append("\n");
            sb.Append("  ClaimStatusUpdateDate: ").Append(ClaimStatusUpdateDate).Append("\n");
            sb.Append("  ValueOfGoods: ").Append(ValueOfGoods).Append("\n");
            sb.Append("  InsuranceValue: ").Append(InsuranceValue).Append("\n");
            sb.Append("  PremiumValue: ").Append(PremiumValue).Append("\n");
            sb.Append("  BasePremium: ").Append(BasePremium).Append("\n");
            sb.Append("  TechnologyFee: ").Append(TechnologyFee).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  MailClass: ").Append(MailClass).Append("\n");
            sb.Append("  MailClassOption: ").Append(MailClassOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelProtectionPolicyResponsePolicyDetails);
        }

        /// <summary>
        /// Returns true if ParcelProtectionPolicyResponsePolicyDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelProtectionPolicyResponsePolicyDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelProtectionPolicyResponsePolicyDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PolicyId == input.PolicyId ||
                    (this.PolicyId != null &&
                    this.PolicyId.Equals(input.PolicyId))
                ) && 
                (
                    this.PolicyDate == input.PolicyDate ||
                    (this.PolicyDate != null &&
                    this.PolicyDate.Equals(input.PolicyDate))
                ) && 
                (
                    this.PolicyStatus == input.PolicyStatus ||
                    (this.PolicyStatus != null &&
                    this.PolicyStatus.Equals(input.PolicyStatus))
                ) && 
                (
                    this.ClaimStatus == input.ClaimStatus ||
                    (this.ClaimStatus != null &&
                    this.ClaimStatus.Equals(input.ClaimStatus))
                ) && 
                (
                    this.ClaimStatusUpdateDate == input.ClaimStatusUpdateDate ||
                    (this.ClaimStatusUpdateDate != null &&
                    this.ClaimStatusUpdateDate.Equals(input.ClaimStatusUpdateDate))
                ) && 
                (
                    this.ValueOfGoods == input.ValueOfGoods ||
                    (this.ValueOfGoods != null &&
                    this.ValueOfGoods.Equals(input.ValueOfGoods))
                ) && 
                (
                    this.InsuranceValue == input.InsuranceValue ||
                    (this.InsuranceValue != null &&
                    this.InsuranceValue.Equals(input.InsuranceValue))
                ) && 
                (
                    this.PremiumValue == input.PremiumValue ||
                    (this.PremiumValue != null &&
                    this.PremiumValue.Equals(input.PremiumValue))
                ) && 
                (
                    this.BasePremium == input.BasePremium ||
                    (this.BasePremium != null &&
                    this.BasePremium.Equals(input.BasePremium))
                ) && 
                (
                    this.TechnologyFee == input.TechnologyFee ||
                    (this.TechnologyFee != null &&
                    this.TechnologyFee.Equals(input.TechnologyFee))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.MailClass == input.MailClass ||
                    (this.MailClass != null &&
                    this.MailClass.Equals(input.MailClass))
                ) && 
                (
                    this.MailClassOption == input.MailClassOption ||
                    (this.MailClassOption != null &&
                    this.MailClassOption.Equals(input.MailClassOption))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PolicyId != null)
                    hashCode = hashCode * 59 + this.PolicyId.GetHashCode();
                if (this.PolicyDate != null)
                    hashCode = hashCode * 59 + this.PolicyDate.GetHashCode();
                if (this.PolicyStatus != null)
                    hashCode = hashCode * 59 + this.PolicyStatus.GetHashCode();
                if (this.ClaimStatus != null)
                    hashCode = hashCode * 59 + this.ClaimStatus.GetHashCode();
                if (this.ClaimStatusUpdateDate != null)
                    hashCode = hashCode * 59 + this.ClaimStatusUpdateDate.GetHashCode();
                if (this.ValueOfGoods != null)
                    hashCode = hashCode * 59 + this.ValueOfGoods.GetHashCode();
                if (this.InsuranceValue != null)
                    hashCode = hashCode * 59 + this.InsuranceValue.GetHashCode();
                if (this.PremiumValue != null)
                    hashCode = hashCode * 59 + this.PremiumValue.GetHashCode();
                if (this.BasePremium != null)
                    hashCode = hashCode * 59 + this.BasePremium.GetHashCode();
                if (this.TechnologyFee != null)
                    hashCode = hashCode * 59 + this.TechnologyFee.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.MailClass != null)
                    hashCode = hashCode * 59 + this.MailClass.GetHashCode();
                if (this.MailClassOption != null)
                    hashCode = hashCode * 59 + this.MailClassOption.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
