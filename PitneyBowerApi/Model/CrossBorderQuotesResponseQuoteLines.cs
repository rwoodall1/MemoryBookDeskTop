/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesResponseQuoteLines
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesResponseQuoteLines :  IEquatable<CrossBorderQuotesResponseQuoteLines>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesResponseQuoteLines" /> class.
        /// </summary>
        /// <param name="lineId">lineId.</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="quoteLineId">quoteLineId.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitRates">unitRates.</param>
        /// <param name="lineRates">lineRates.</param>
        public CrossBorderQuotesResponseQuoteLines(string lineId = default(string), string itemId = default(string), string quoteLineId = default(string), int quantity = default(int), CrossBorderQuotesResponseUnitRates unitRates = default(CrossBorderQuotesResponseUnitRates), CrossBorderQuotesResponseLineRates lineRates = default(CrossBorderQuotesResponseLineRates))
        {
            this.LineId = lineId;
            this.ItemId = itemId;
            this.QuoteLineId = quoteLineId;
            this.Quantity = quantity;
            this.UnitRates = unitRates;
            this.LineRates = lineRates;
        }
        
        /// <summary>
        /// Gets or Sets LineId
        /// </summary>
        [DataMember(Name="lineId", EmitDefaultValue=false)]
        public string LineId { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets QuoteLineId
        /// </summary>
        [DataMember(Name="quoteLineId", EmitDefaultValue=false)]
        public string QuoteLineId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitRates
        /// </summary>
        [DataMember(Name="unitRates", EmitDefaultValue=false)]
        public CrossBorderQuotesResponseUnitRates UnitRates { get; set; }

        /// <summary>
        /// Gets or Sets LineRates
        /// </summary>
        [DataMember(Name="lineRates", EmitDefaultValue=false)]
        public CrossBorderQuotesResponseLineRates LineRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesResponseQuoteLines {\n");
            sb.Append("  LineId: ").Append(LineId).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  QuoteLineId: ").Append(QuoteLineId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitRates: ").Append(UnitRates).Append("\n");
            sb.Append("  LineRates: ").Append(LineRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesResponseQuoteLines);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesResponseQuoteLines instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesResponseQuoteLines to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesResponseQuoteLines input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LineId == input.LineId ||
                    (this.LineId != null &&
                    this.LineId.Equals(input.LineId))
                ) && 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.QuoteLineId == input.QuoteLineId ||
                    (this.QuoteLineId != null &&
                    this.QuoteLineId.Equals(input.QuoteLineId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitRates == input.UnitRates ||
                    (this.UnitRates != null &&
                    this.UnitRates.Equals(input.UnitRates))
                ) && 
                (
                    this.LineRates == input.LineRates ||
                    (this.LineRates != null &&
                    this.LineRates.Equals(input.LineRates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LineId != null)
                    hashCode = hashCode * 59 + this.LineId.GetHashCode();
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.QuoteLineId != null)
                    hashCode = hashCode * 59 + this.QuoteLineId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitRates != null)
                    hashCode = hashCode * 59 + this.UnitRates.GetHashCode();
                if (this.LineRates != null)
                    hashCode = hashCode * 59 + this.LineRates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
