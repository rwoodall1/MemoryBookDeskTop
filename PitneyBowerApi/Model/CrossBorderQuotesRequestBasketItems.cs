/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesRequestBasketItems
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesRequestBasketItems :  IEquatable<CrossBorderQuotesRequestBasketItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequestBasketItems" /> class.
        /// </summary>
        /// <param name="itemId">itemId.</param>
        /// <param name="categories">categories.</param>
        /// <param name="description">description.</param>
        /// <param name="longDescription">longDescription.</param>
        /// <param name="unitWeight">unitWeight.</param>
        /// <param name="itemDimension">itemDimension.</param>
        /// <param name="url">url.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="unitPrice">unitPrice.</param>
        /// <param name="originCountryCode">originCountryCode.</param>
        /// <param name="parentIdentifier">parentIdentifier.</param>
        /// <param name="childIdentifier">childIdentifier.</param>
        /// <param name="kit">kit.</param>
        /// <param name="kitIdentifier">kitIdentifier.</param>
        /// <param name="kitQuantity">kitQuantity.</param>
        /// <param name="manufacturer">manufacturer.</param>
        /// <param name="brand">brand.</param>
        /// <param name="eccn">eccn.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="pricing">pricing.</param>
        /// <param name="hSTariffCode">hSTariffCode.</param>
        /// <param name="hSTariffCodeCountry">hSTariffCodeCountry.</param>
        /// <param name="identifiers">identifiers.</param>
        /// <param name="imageUrls">imageUrls.</param>
        /// <param name="shipsAlone">shipsAlone.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="hazmats">hazmats.</param>
        public CrossBorderQuotesRequestBasketItems(string itemId = default(string), List<CrossBorderQuotesRequestCategories> categories = default(List<CrossBorderQuotesRequestCategories>), string description = default(string), string longDescription = default(string), CrossBorderQuotesRequestUnitWeight unitWeight = default(CrossBorderQuotesRequestUnitWeight), CrossBorderQuotesRequestItemDimension itemDimension = default(CrossBorderQuotesRequestItemDimension), string url = default(string), int quantity = default(int), decimal unitPrice = default(decimal), string originCountryCode = default(string), string parentIdentifier = default(string), string childIdentifier = default(string), string kit = default(string), string kitIdentifier = default(string), string kitQuantity = default(string), string manufacturer = default(string), string brand = default(string), string eccn = default(string), bool enabled = default(bool), CrossBorderQuotesRequestPricing pricing = default(CrossBorderQuotesRequestPricing), string hSTariffCode = default(string), string hSTariffCodeCountry = default(string), List<CrossBorderQuotesRequestIdentifiers> identifiers = default(List<CrossBorderQuotesRequestIdentifiers>), List<string> imageUrls = default(List<string>), bool shipsAlone = default(bool), List<CrossBorderQuotesRequestAttributes> attributes = default(List<CrossBorderQuotesRequestAttributes>), List<string> hazmats = default(List<string>))
        {
            this.ItemId = itemId;
            this.Categories = categories;
            this.Description = description;
            this.LongDescription = longDescription;
            this.UnitWeight = unitWeight;
            this.ItemDimension = itemDimension;
            this.Url = url;
            this.Quantity = quantity;
            this.UnitPrice = unitPrice;
            this.OriginCountryCode = originCountryCode;
            this.ParentIdentifier = parentIdentifier;
            this.ChildIdentifier = childIdentifier;
            this.Kit = kit;
            this.KitIdentifier = kitIdentifier;
            this.KitQuantity = kitQuantity;
            this.Manufacturer = manufacturer;
            this.Brand = brand;
            this.Eccn = eccn;
            this.Enabled = enabled;
            this.Pricing = pricing;
            this.HSTariffCode = hSTariffCode;
            this.HSTariffCodeCountry = hSTariffCodeCountry;
            this.Identifiers = identifiers;
            this.ImageUrls = imageUrls;
            this.ShipsAlone = shipsAlone;
            this.Attributes = attributes;
            this.Hazmats = hazmats;
        }
        
        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name="itemId", EmitDefaultValue=false)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<CrossBorderQuotesRequestCategories> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LongDescription
        /// </summary>
        [DataMember(Name="longDescription", EmitDefaultValue=false)]
        public string LongDescription { get; set; }

        /// <summary>
        /// Gets or Sets UnitWeight
        /// </summary>
        [DataMember(Name="unitWeight", EmitDefaultValue=false)]
        public CrossBorderQuotesRequestUnitWeight UnitWeight { get; set; }

        /// <summary>
        /// Gets or Sets ItemDimension
        /// </summary>
        [DataMember(Name="itemDimension", EmitDefaultValue=false)]
        public CrossBorderQuotesRequestItemDimension ItemDimension { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=false)]
        public decimal UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets OriginCountryCode
        /// </summary>
        [DataMember(Name="originCountryCode", EmitDefaultValue=false)]
        public string OriginCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets ParentIdentifier
        /// </summary>
        [DataMember(Name="parentIdentifier", EmitDefaultValue=false)]
        public string ParentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets ChildIdentifier
        /// </summary>
        [DataMember(Name="childIdentifier", EmitDefaultValue=false)]
        public string ChildIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Kit
        /// </summary>
        [DataMember(Name="kit", EmitDefaultValue=false)]
        public string Kit { get; set; }

        /// <summary>
        /// Gets or Sets KitIdentifier
        /// </summary>
        [DataMember(Name="kitIdentifier", EmitDefaultValue=false)]
        public string KitIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets KitQuantity
        /// </summary>
        [DataMember(Name="kitQuantity", EmitDefaultValue=false)]
        public string KitQuantity { get; set; }

        /// <summary>
        /// Gets or Sets Manufacturer
        /// </summary>
        [DataMember(Name="manufacturer", EmitDefaultValue=false)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or Sets Brand
        /// </summary>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// Gets or Sets Eccn
        /// </summary>
        [DataMember(Name="eccn", EmitDefaultValue=false)]
        public string Eccn { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Pricing
        /// </summary>
        [DataMember(Name="pricing", EmitDefaultValue=false)]
        public CrossBorderQuotesRequestPricing Pricing { get; set; }

        /// <summary>
        /// Gets or Sets HSTariffCode
        /// </summary>
        [DataMember(Name="hSTariffCode", EmitDefaultValue=false)]
        public string HSTariffCode { get; set; }

        /// <summary>
        /// Gets or Sets HSTariffCodeCountry
        /// </summary>
        [DataMember(Name="hSTariffCodeCountry", EmitDefaultValue=false)]
        public string HSTariffCodeCountry { get; set; }

        /// <summary>
        /// Gets or Sets Identifiers
        /// </summary>
        [DataMember(Name="identifiers", EmitDefaultValue=false)]
        public List<CrossBorderQuotesRequestIdentifiers> Identifiers { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrls
        /// </summary>
        [DataMember(Name="imageUrls", EmitDefaultValue=false)]
        public List<string> ImageUrls { get; set; }

        /// <summary>
        /// Gets or Sets ShipsAlone
        /// </summary>
        [DataMember(Name="shipsAlone", EmitDefaultValue=false)]
        public bool ShipsAlone { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<CrossBorderQuotesRequestAttributes> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Hazmats
        /// </summary>
        [DataMember(Name="hazmats", EmitDefaultValue=false)]
        public List<string> Hazmats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesRequestBasketItems {\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("  ItemDimension: ").Append(ItemDimension).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  OriginCountryCode: ").Append(OriginCountryCode).Append("\n");
            sb.Append("  ParentIdentifier: ").Append(ParentIdentifier).Append("\n");
            sb.Append("  ChildIdentifier: ").Append(ChildIdentifier).Append("\n");
            sb.Append("  Kit: ").Append(Kit).Append("\n");
            sb.Append("  KitIdentifier: ").Append(KitIdentifier).Append("\n");
            sb.Append("  KitQuantity: ").Append(KitQuantity).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Eccn: ").Append(Eccn).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Pricing: ").Append(Pricing).Append("\n");
            sb.Append("  HSTariffCode: ").Append(HSTariffCode).Append("\n");
            sb.Append("  HSTariffCodeCountry: ").Append(HSTariffCodeCountry).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  ImageUrls: ").Append(ImageUrls).Append("\n");
            sb.Append("  ShipsAlone: ").Append(ShipsAlone).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Hazmats: ").Append(Hazmats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesRequestBasketItems);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesRequestBasketItems instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesRequestBasketItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesRequestBasketItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemId == input.ItemId ||
                    (this.ItemId != null &&
                    this.ItemId.Equals(input.ItemId))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.LongDescription == input.LongDescription ||
                    (this.LongDescription != null &&
                    this.LongDescription.Equals(input.LongDescription))
                ) && 
                (
                    this.UnitWeight == input.UnitWeight ||
                    (this.UnitWeight != null &&
                    this.UnitWeight.Equals(input.UnitWeight))
                ) && 
                (
                    this.ItemDimension == input.ItemDimension ||
                    (this.ItemDimension != null &&
                    this.ItemDimension.Equals(input.ItemDimension))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.OriginCountryCode == input.OriginCountryCode ||
                    (this.OriginCountryCode != null &&
                    this.OriginCountryCode.Equals(input.OriginCountryCode))
                ) && 
                (
                    this.ParentIdentifier == input.ParentIdentifier ||
                    (this.ParentIdentifier != null &&
                    this.ParentIdentifier.Equals(input.ParentIdentifier))
                ) && 
                (
                    this.ChildIdentifier == input.ChildIdentifier ||
                    (this.ChildIdentifier != null &&
                    this.ChildIdentifier.Equals(input.ChildIdentifier))
                ) && 
                (
                    this.Kit == input.Kit ||
                    (this.Kit != null &&
                    this.Kit.Equals(input.Kit))
                ) && 
                (
                    this.KitIdentifier == input.KitIdentifier ||
                    (this.KitIdentifier != null &&
                    this.KitIdentifier.Equals(input.KitIdentifier))
                ) && 
                (
                    this.KitQuantity == input.KitQuantity ||
                    (this.KitQuantity != null &&
                    this.KitQuantity.Equals(input.KitQuantity))
                ) && 
                (
                    this.Manufacturer == input.Manufacturer ||
                    (this.Manufacturer != null &&
                    this.Manufacturer.Equals(input.Manufacturer))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Eccn == input.Eccn ||
                    (this.Eccn != null &&
                    this.Eccn.Equals(input.Eccn))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    (this.Enabled != null &&
                    this.Enabled.Equals(input.Enabled))
                ) && 
                (
                    this.Pricing == input.Pricing ||
                    (this.Pricing != null &&
                    this.Pricing.Equals(input.Pricing))
                ) && 
                (
                    this.HSTariffCode == input.HSTariffCode ||
                    (this.HSTariffCode != null &&
                    this.HSTariffCode.Equals(input.HSTariffCode))
                ) && 
                (
                    this.HSTariffCodeCountry == input.HSTariffCodeCountry ||
                    (this.HSTariffCodeCountry != null &&
                    this.HSTariffCodeCountry.Equals(input.HSTariffCodeCountry))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && 
                (
                    this.ImageUrls == input.ImageUrls ||
                    this.ImageUrls != null &&
                    input.ImageUrls != null &&
                    this.ImageUrls.SequenceEqual(input.ImageUrls)
                ) && 
                (
                    this.ShipsAlone == input.ShipsAlone ||
                    (this.ShipsAlone != null &&
                    this.ShipsAlone.Equals(input.ShipsAlone))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.Hazmats == input.Hazmats ||
                    this.Hazmats != null &&
                    input.Hazmats != null &&
                    this.Hazmats.SequenceEqual(input.Hazmats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemId != null)
                    hashCode = hashCode * 59 + this.ItemId.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.LongDescription != null)
                    hashCode = hashCode * 59 + this.LongDescription.GetHashCode();
                if (this.UnitWeight != null)
                    hashCode = hashCode * 59 + this.UnitWeight.GetHashCode();
                if (this.ItemDimension != null)
                    hashCode = hashCode * 59 + this.ItemDimension.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.OriginCountryCode != null)
                    hashCode = hashCode * 59 + this.OriginCountryCode.GetHashCode();
                if (this.ParentIdentifier != null)
                    hashCode = hashCode * 59 + this.ParentIdentifier.GetHashCode();
                if (this.ChildIdentifier != null)
                    hashCode = hashCode * 59 + this.ChildIdentifier.GetHashCode();
                if (this.Kit != null)
                    hashCode = hashCode * 59 + this.Kit.GetHashCode();
                if (this.KitIdentifier != null)
                    hashCode = hashCode * 59 + this.KitIdentifier.GetHashCode();
                if (this.KitQuantity != null)
                    hashCode = hashCode * 59 + this.KitQuantity.GetHashCode();
                if (this.Manufacturer != null)
                    hashCode = hashCode * 59 + this.Manufacturer.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.Eccn != null)
                    hashCode = hashCode * 59 + this.Eccn.GetHashCode();
                if (this.Enabled != null)
                    hashCode = hashCode * 59 + this.Enabled.GetHashCode();
                if (this.Pricing != null)
                    hashCode = hashCode * 59 + this.Pricing.GetHashCode();
                if (this.HSTariffCode != null)
                    hashCode = hashCode * 59 + this.HSTariffCode.GetHashCode();
                if (this.HSTariffCodeCountry != null)
                    hashCode = hashCode * 59 + this.HSTariffCodeCountry.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.ImageUrls != null)
                    hashCode = hashCode * 59 + this.ImageUrls.GetHashCode();
                if (this.ShipsAlone != null)
                    hashCode = hashCode * 59 + this.ShipsAlone.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Hazmats != null)
                    hashCode = hashCode * 59 + this.Hazmats.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
