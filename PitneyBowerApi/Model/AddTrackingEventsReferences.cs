/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// AddTrackingEventsReferences
    /// </summary>
    [DataContract]
    public partial class AddTrackingEventsReferences :  IEquatable<AddTrackingEventsReferences>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTrackingEventsReferences" /> class.
        /// </summary>
        /// <param name="referenceType">referenceType.</param>
        /// <param name="referenceValue">referenceValue.</param>
        /// <param name="events">events.</param>
        public AddTrackingEventsReferences(string referenceType = default(string), string referenceValue = default(string), List<AddTrackingEventsEvents> events = default(List<AddTrackingEventsEvents>))
        {
            this.ReferenceType = referenceType;
            this.ReferenceValue = referenceValue;
            this.Events = events;
        }
        
        /// <summary>
        /// Gets or Sets ReferenceType
        /// </summary>
        [DataMember(Name="referenceType", EmitDefaultValue=false)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceValue
        /// </summary>
        [DataMember(Name="referenceValue", EmitDefaultValue=false)]
        public string ReferenceValue { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<AddTrackingEventsEvents> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddTrackingEventsReferences {\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("  ReferenceValue: ").Append(ReferenceValue).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddTrackingEventsReferences);
        }

        /// <summary>
        /// Returns true if AddTrackingEventsReferences instances are equal
        /// </summary>
        /// <param name="input">Instance of AddTrackingEventsReferences to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddTrackingEventsReferences input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReferenceType == input.ReferenceType ||
                    (this.ReferenceType != null &&
                    this.ReferenceType.Equals(input.ReferenceType))
                ) && 
                (
                    this.ReferenceValue == input.ReferenceValue ||
                    (this.ReferenceValue != null &&
                    this.ReferenceValue.Equals(input.ReferenceValue))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceType != null)
                    hashCode = hashCode * 59 + this.ReferenceType.GetHashCode();
                if (this.ReferenceValue != null)
                    hashCode = hashCode * 59 + this.ReferenceValue.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
