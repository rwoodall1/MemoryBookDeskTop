/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// SpecialService
    /// </summary>
    [DataContract]
    public partial class SpecialService :  IEquatable<SpecialService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpecialService() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecialService" /> class.
        /// </summary>
        /// <param name="fee">fee.</param>
        /// <param name="inputParameters">inputParameters.</param>
        /// <param name="specialServiceId">specialServiceId (required).</param>
        public SpecialService(decimal fee = default(decimal), List<Parameter> inputParameters = default(List<Parameter>), string specialServiceId = default(string))
        {
            // to ensure "specialServiceId" is required (not null)
            if (specialServiceId == null)
            {
                throw new InvalidDataException("specialServiceId is a required property for SpecialService and cannot be null");
            }
            else
            {
                this.SpecialServiceId = specialServiceId;
            }
            
            this.Fee = fee;
            this.InputParameters = inputParameters;
        }
        
        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public decimal Fee { get; set; }

        /// <summary>
        /// Gets or Sets InputParameters
        /// </summary>
        [DataMember(Name="inputParameters", EmitDefaultValue=false)]
        public List<Parameter> InputParameters { get; set; }

        /// <summary>
        /// Gets or Sets SpecialServiceId
        /// </summary>
        [DataMember(Name="specialServiceId", EmitDefaultValue=true)]
        public string SpecialServiceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpecialService {\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  InputParameters: ").Append(InputParameters).Append("\n");
            sb.Append("  SpecialServiceId: ").Append(SpecialServiceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecialService);
        }

        /// <summary>
        /// Returns true if SpecialService instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecialService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecialService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.InputParameters == input.InputParameters ||
                    this.InputParameters != null &&
                    input.InputParameters != null &&
                    this.InputParameters.SequenceEqual(input.InputParameters)
                ) && 
                (
                    this.SpecialServiceId == input.SpecialServiceId ||
                    (this.SpecialServiceId != null &&
                    this.SpecialServiceId.Equals(input.SpecialServiceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.InputParameters != null)
                    hashCode = hashCode * 59 + this.InputParameters.GetHashCode();
                if (this.SpecialServiceId != null)
                    hashCode = hashCode * 59 + this.SpecialServiceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
