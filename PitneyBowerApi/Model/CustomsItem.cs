/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CustomsItem
    /// </summary>
    [DataContract]
    public partial class CustomsItem :  IEquatable<CustomsItem>, IValidatableObject
    {
        /// <summary>
        /// Defines NetCostMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetCostMethodEnum
        {
            /// <summary>
            /// Enum NONETCOST for value: NO_NET_COST
            /// </summary>
            [EnumMember(Value = "NO_NET_COST")]
            NONETCOST = 1,

            /// <summary>
            /// Enum NETCOST for value: NET_COST
            /// </summary>
            [EnumMember(Value = "NET_COST")]
            NETCOST = 2

        }

        /// <summary>
        /// Gets or Sets NetCostMethod
        /// </summary>
        [DataMember(Name="netCostMethod", EmitDefaultValue=false)]
        public NetCostMethodEnum? NetCostMethod { get; set; }
        /// <summary>
        /// Defines PreferenceCriterion
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PreferenceCriterionEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 3,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4,

            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 5,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 6

        }

        /// <summary>
        /// Gets or Sets PreferenceCriterion
        /// </summary>
        [DataMember(Name="preferenceCriterion", EmitDefaultValue=false)]
        public PreferenceCriterionEnum? PreferenceCriterion { get; set; }
        /// <summary>
        /// Defines ProducerDetermination
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProducerDeterminationEnum
        {
            /// <summary>
            /// Enum NO1 for value: NO_1
            /// </summary>
            [EnumMember(Value = "NO_1")]
            NO1 = 1,

            /// <summary>
            /// Enum NO2 for value: NO_2
            /// </summary>
            [EnumMember(Value = "NO_2")]
            NO2 = 2,

            /// <summary>
            /// Enum NO3 for value: NO_3
            /// </summary>
            [EnumMember(Value = "NO_3")]
            NO3 = 3,

            /// <summary>
            /// Enum PDYES for value: PD_YES
            /// </summary>
            [EnumMember(Value = "PD_YES")]
            PDYES = 4

        }

        /// <summary>
        /// Gets or Sets ProducerDetermination
        /// </summary>
        [DataMember(Name="producerDetermination", EmitDefaultValue=false)]
        public ProducerDeterminationEnum? ProducerDetermination { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomsItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomsItem" /> class.
        /// </summary>
        /// <param name="description">description (required).</param>
        /// <param name="hSTariffCode">hSTariffCode.</param>
        /// <param name="netCostMethod">netCostMethod.</param>
        /// <param name="originCountryCode">originCountryCode (required).</param>
        /// <param name="originStateProvince">originStateProvince.</param>
        /// <param name="preferenceCriterion">preferenceCriterion.</param>
        /// <param name="producerAddress">producerAddress.</param>
        /// <param name="producerDetermination">producerDetermination.</param>
        /// <param name="producerId">producerId.</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="quantityUOM">quantityUOM.</param>
        /// <param name="unitPrice">unitPrice (required).</param>
        /// <param name="unitWeight">unitWeight (required).</param>
        public CustomsItem(string description = default(string), string hSTariffCode = default(string), NetCostMethodEnum? netCostMethod = default(NetCostMethodEnum?), string originCountryCode = default(string), string originStateProvince = default(string), PreferenceCriterionEnum? preferenceCriterion = default(PreferenceCriterionEnum?), Address producerAddress = default(Address), ProducerDeterminationEnum? producerDetermination = default(ProducerDeterminationEnum?), string producerId = default(string), int quantity = default(int), string quantityUOM = default(string), decimal unitPrice = default(decimal), ParcelWeight unitWeight = default(ParcelWeight))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for CustomsItem and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            // to ensure "originCountryCode" is required (not null)
            if (originCountryCode == null)
            {
                throw new InvalidDataException("originCountryCode is a required property for CustomsItem and cannot be null");
            }
            else
            {
                this.OriginCountryCode = originCountryCode;
            }
            
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for CustomsItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            
            // to ensure "unitPrice" is required (not null)
            if (unitPrice == null)
            {
                throw new InvalidDataException("unitPrice is a required property for CustomsItem and cannot be null");
            }
            else
            {
                this.UnitPrice = unitPrice;
            }
            
            // to ensure "unitWeight" is required (not null)
            if (unitWeight == null)
            {
                throw new InvalidDataException("unitWeight is a required property for CustomsItem and cannot be null");
            }
            else
            {
                this.UnitWeight = unitWeight;
            }
            
            this.HSTariffCode = hSTariffCode;
            this.NetCostMethod = netCostMethod;
            this.OriginStateProvince = originStateProvince;
            this.PreferenceCriterion = preferenceCriterion;
            this.ProducerAddress = producerAddress;
            this.ProducerDetermination = producerDetermination;
            this.ProducerId = producerId;
            this.QuantityUOM = quantityUOM;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HSTariffCode
        /// </summary>
        [DataMember(Name="hSTariffCode", EmitDefaultValue=false)]
        public string HSTariffCode { get; set; }


        /// <summary>
        /// Gets or Sets OriginCountryCode
        /// </summary>
        [DataMember(Name="originCountryCode", EmitDefaultValue=true)]
        public string OriginCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets OriginStateProvince
        /// </summary>
        [DataMember(Name="originStateProvince", EmitDefaultValue=false)]
        public string OriginStateProvince { get; set; }


        /// <summary>
        /// Gets or Sets ProducerAddress
        /// </summary>
        [DataMember(Name="producerAddress", EmitDefaultValue=false)]
        public Address ProducerAddress { get; set; }


        /// <summary>
        /// Gets or Sets ProducerId
        /// </summary>
        [DataMember(Name="producerId", EmitDefaultValue=false)]
        public string ProducerId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityUOM
        /// </summary>
        [DataMember(Name="quantityUOM", EmitDefaultValue=false)]
        public string QuantityUOM { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="unitPrice", EmitDefaultValue=true)]
        public decimal UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitWeight
        /// </summary>
        [DataMember(Name="unitWeight", EmitDefaultValue=true)]
        public ParcelWeight UnitWeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomsItem {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HSTariffCode: ").Append(HSTariffCode).Append("\n");
            sb.Append("  NetCostMethod: ").Append(NetCostMethod).Append("\n");
            sb.Append("  OriginCountryCode: ").Append(OriginCountryCode).Append("\n");
            sb.Append("  OriginStateProvince: ").Append(OriginStateProvince).Append("\n");
            sb.Append("  PreferenceCriterion: ").Append(PreferenceCriterion).Append("\n");
            sb.Append("  ProducerAddress: ").Append(ProducerAddress).Append("\n");
            sb.Append("  ProducerDetermination: ").Append(ProducerDetermination).Append("\n");
            sb.Append("  ProducerId: ").Append(ProducerId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityUOM: ").Append(QuantityUOM).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitWeight: ").Append(UnitWeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomsItem);
        }

        /// <summary>
        /// Returns true if CustomsItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomsItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HSTariffCode == input.HSTariffCode ||
                    (this.HSTariffCode != null &&
                    this.HSTariffCode.Equals(input.HSTariffCode))
                ) && 
                (
                    this.NetCostMethod == input.NetCostMethod ||
                    (this.NetCostMethod != null &&
                    this.NetCostMethod.Equals(input.NetCostMethod))
                ) && 
                (
                    this.OriginCountryCode == input.OriginCountryCode ||
                    (this.OriginCountryCode != null &&
                    this.OriginCountryCode.Equals(input.OriginCountryCode))
                ) && 
                (
                    this.OriginStateProvince == input.OriginStateProvince ||
                    (this.OriginStateProvince != null &&
                    this.OriginStateProvince.Equals(input.OriginStateProvince))
                ) && 
                (
                    this.PreferenceCriterion == input.PreferenceCriterion ||
                    (this.PreferenceCriterion != null &&
                    this.PreferenceCriterion.Equals(input.PreferenceCriterion))
                ) && 
                (
                    this.ProducerAddress == input.ProducerAddress ||
                    (this.ProducerAddress != null &&
                    this.ProducerAddress.Equals(input.ProducerAddress))
                ) && 
                (
                    this.ProducerDetermination == input.ProducerDetermination ||
                    (this.ProducerDetermination != null &&
                    this.ProducerDetermination.Equals(input.ProducerDetermination))
                ) && 
                (
                    this.ProducerId == input.ProducerId ||
                    (this.ProducerId != null &&
                    this.ProducerId.Equals(input.ProducerId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityUOM == input.QuantityUOM ||
                    (this.QuantityUOM != null &&
                    this.QuantityUOM.Equals(input.QuantityUOM))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.UnitWeight == input.UnitWeight ||
                    (this.UnitWeight != null &&
                    this.UnitWeight.Equals(input.UnitWeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HSTariffCode != null)
                    hashCode = hashCode * 59 + this.HSTariffCode.GetHashCode();
                if (this.NetCostMethod != null)
                    hashCode = hashCode * 59 + this.NetCostMethod.GetHashCode();
                if (this.OriginCountryCode != null)
                    hashCode = hashCode * 59 + this.OriginCountryCode.GetHashCode();
                if (this.OriginStateProvince != null)
                    hashCode = hashCode * 59 + this.OriginStateProvince.GetHashCode();
                if (this.PreferenceCriterion != null)
                    hashCode = hashCode * 59 + this.PreferenceCriterion.GetHashCode();
                if (this.ProducerAddress != null)
                    hashCode = hashCode * 59 + this.ProducerAddress.GetHashCode();
                if (this.ProducerDetermination != null)
                    hashCode = hashCode * 59 + this.ProducerDetermination.GetHashCode();
                if (this.ProducerId != null)
                    hashCode = hashCode * 59 + this.ProducerId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityUOM != null)
                    hashCode = hashCode * 59 + this.QuantityUOM.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.UnitWeight != null)
                    hashCode = hashCode * 59 + this.UnitWeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
