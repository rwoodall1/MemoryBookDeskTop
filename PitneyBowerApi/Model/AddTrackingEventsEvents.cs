/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// AddTrackingEventsEvents
    /// </summary>
    [DataContract]
    public partial class AddTrackingEventsEvents :  IEquatable<AddTrackingEventsEvents>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddTrackingEventsEvents" /> class.
        /// </summary>
        /// <param name="eventCode">eventCode.</param>
        /// <param name="carrierEventCode">carrierEventCode.</param>
        /// <param name="eventDate">eventDate.</param>
        /// <param name="eventTime">eventTime.</param>
        /// <param name="eventTimeOffset">eventTimeOffset.</param>
        /// <param name="eventCity">eventCity.</param>
        /// <param name="eventStateOrProvince">eventStateOrProvince.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="country">country.</param>
        public AddTrackingEventsEvents(string eventCode = default(string), string carrierEventCode = default(string), string eventDate = default(string), string eventTime = default(string), string eventTimeOffset = default(string), string eventCity = default(string), string eventStateOrProvince = default(string), string postalCode = default(string), string country = default(string))
        {
            this.EventCode = eventCode;
            this.CarrierEventCode = carrierEventCode;
            this.EventDate = eventDate;
            this.EventTime = eventTime;
            this.EventTimeOffset = eventTimeOffset;
            this.EventCity = eventCity;
            this.EventStateOrProvince = eventStateOrProvince;
            this.PostalCode = postalCode;
            this.Country = country;
        }
        
        /// <summary>
        /// Gets or Sets EventCode
        /// </summary>
        [DataMember(Name="eventCode", EmitDefaultValue=false)]
        public string EventCode { get; set; }

        /// <summary>
        /// Gets or Sets CarrierEventCode
        /// </summary>
        [DataMember(Name="carrierEventCode", EmitDefaultValue=false)]
        public string CarrierEventCode { get; set; }

        /// <summary>
        /// Gets or Sets EventDate
        /// </summary>
        [DataMember(Name="eventDate", EmitDefaultValue=false)]
        public string EventDate { get; set; }

        /// <summary>
        /// Gets or Sets EventTime
        /// </summary>
        [DataMember(Name="eventTime", EmitDefaultValue=false)]
        public string EventTime { get; set; }

        /// <summary>
        /// Gets or Sets EventTimeOffset
        /// </summary>
        [DataMember(Name="eventTimeOffset", EmitDefaultValue=false)]
        public string EventTimeOffset { get; set; }

        /// <summary>
        /// Gets or Sets EventCity
        /// </summary>
        [DataMember(Name="eventCity", EmitDefaultValue=false)]
        public string EventCity { get; set; }

        /// <summary>
        /// Gets or Sets EventStateOrProvince
        /// </summary>
        [DataMember(Name="eventStateOrProvince", EmitDefaultValue=false)]
        public string EventStateOrProvince { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddTrackingEventsEvents {\n");
            sb.Append("  EventCode: ").Append(EventCode).Append("\n");
            sb.Append("  CarrierEventCode: ").Append(CarrierEventCode).Append("\n");
            sb.Append("  EventDate: ").Append(EventDate).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  EventTimeOffset: ").Append(EventTimeOffset).Append("\n");
            sb.Append("  EventCity: ").Append(EventCity).Append("\n");
            sb.Append("  EventStateOrProvince: ").Append(EventStateOrProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddTrackingEventsEvents);
        }

        /// <summary>
        /// Returns true if AddTrackingEventsEvents instances are equal
        /// </summary>
        /// <param name="input">Instance of AddTrackingEventsEvents to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddTrackingEventsEvents input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventCode == input.EventCode ||
                    (this.EventCode != null &&
                    this.EventCode.Equals(input.EventCode))
                ) && 
                (
                    this.CarrierEventCode == input.CarrierEventCode ||
                    (this.CarrierEventCode != null &&
                    this.CarrierEventCode.Equals(input.CarrierEventCode))
                ) && 
                (
                    this.EventDate == input.EventDate ||
                    (this.EventDate != null &&
                    this.EventDate.Equals(input.EventDate))
                ) && 
                (
                    this.EventTime == input.EventTime ||
                    (this.EventTime != null &&
                    this.EventTime.Equals(input.EventTime))
                ) && 
                (
                    this.EventTimeOffset == input.EventTimeOffset ||
                    (this.EventTimeOffset != null &&
                    this.EventTimeOffset.Equals(input.EventTimeOffset))
                ) && 
                (
                    this.EventCity == input.EventCity ||
                    (this.EventCity != null &&
                    this.EventCity.Equals(input.EventCity))
                ) && 
                (
                    this.EventStateOrProvince == input.EventStateOrProvince ||
                    (this.EventStateOrProvince != null &&
                    this.EventStateOrProvince.Equals(input.EventStateOrProvince))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventCode != null)
                    hashCode = hashCode * 59 + this.EventCode.GetHashCode();
                if (this.CarrierEventCode != null)
                    hashCode = hashCode * 59 + this.CarrierEventCode.GetHashCode();
                if (this.EventDate != null)
                    hashCode = hashCode * 59 + this.EventDate.GetHashCode();
                if (this.EventTime != null)
                    hashCode = hashCode * 59 + this.EventTime.GetHashCode();
                if (this.EventTimeOffset != null)
                    hashCode = hashCode * 59 + this.EventTimeOffset.GetHashCode();
                if (this.EventCity != null)
                    hashCode = hashCode * 59 + this.EventCity.GetHashCode();
                if (this.EventStateOrProvince != null)
                    hashCode = hashCode * 59 + this.EventStateOrProvince.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
