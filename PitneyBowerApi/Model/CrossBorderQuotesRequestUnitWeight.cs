/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// CrossBorderQuotesRequestUnitWeight
    /// </summary>
    [DataContract]
    public partial class CrossBorderQuotesRequestUnitWeight :  IEquatable<CrossBorderQuotesRequestUnitWeight>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequestUnitWeight" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CrossBorderQuotesRequestUnitWeight() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossBorderQuotesRequestUnitWeight" /> class.
        /// </summary>
        /// <param name="weight">weight (required).</param>
        /// <param name="unitOfMeasurement">unitOfMeasurement (required).</param>
        public CrossBorderQuotesRequestUnitWeight(int weight = default(int), string unitOfMeasurement = default(string))
        {
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for CrossBorderQuotesRequestUnitWeight and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            
            // to ensure "unitOfMeasurement" is required (not null)
            if (unitOfMeasurement == null)
            {
                throw new InvalidDataException("unitOfMeasurement is a required property for CrossBorderQuotesRequestUnitWeight and cannot be null");
            }
            else
            {
                this.UnitOfMeasurement = unitOfMeasurement;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=true)]
        public int Weight { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasurement
        /// </summary>
        [DataMember(Name="unitOfMeasurement", EmitDefaultValue=true)]
        public string UnitOfMeasurement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrossBorderQuotesRequestUnitWeight {\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  UnitOfMeasurement: ").Append(UnitOfMeasurement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrossBorderQuotesRequestUnitWeight);
        }

        /// <summary>
        /// Returns true if CrossBorderQuotesRequestUnitWeight instances are equal
        /// </summary>
        /// <param name="input">Instance of CrossBorderQuotesRequestUnitWeight to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrossBorderQuotesRequestUnitWeight input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.UnitOfMeasurement == input.UnitOfMeasurement ||
                    (this.UnitOfMeasurement != null &&
                    this.UnitOfMeasurement.Equals(input.UnitOfMeasurement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.UnitOfMeasurement != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasurement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
