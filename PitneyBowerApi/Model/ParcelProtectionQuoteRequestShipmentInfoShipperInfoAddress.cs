/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress
    /// </summary>
    [DataContract]
    public partial class ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress :  IEquatable<ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress" /> class.
        /// </summary>
        /// <param name="addressLines">addressLines (required).</param>
        /// <param name="cityTown">cityTown (required).</param>
        /// <param name="stateProvince">stateProvince (required).</param>
        /// <param name="postalCode">postalCode (required).</param>
        /// <param name="countryCode">countryCode (required).</param>
        public ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress(List<string> addressLines = default(List<string>), string cityTown = default(string), string stateProvince = default(string), string postalCode = default(string), string countryCode = default(string))
        {
            // to ensure "addressLines" is required (not null)
            if (addressLines == null)
            {
                throw new InvalidDataException("addressLines is a required property for ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress and cannot be null");
            }
            else
            {
                this.AddressLines = addressLines;
            }
            
            // to ensure "cityTown" is required (not null)
            if (cityTown == null)
            {
                throw new InvalidDataException("cityTown is a required property for ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress and cannot be null");
            }
            else
            {
                this.CityTown = cityTown;
            }
            
            // to ensure "stateProvince" is required (not null)
            if (stateProvince == null)
            {
                throw new InvalidDataException("stateProvince is a required property for ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress and cannot be null");
            }
            else
            {
                this.StateProvince = stateProvince;
            }
            
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new InvalidDataException("postalCode is a required property for ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress and cannot be null");
            }
            else
            {
                this.PostalCode = postalCode;
            }
            
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets AddressLines
        /// </summary>
        [DataMember(Name="addressLines", EmitDefaultValue=true)]
        public List<string> AddressLines { get; set; }

        /// <summary>
        /// Gets or Sets CityTown
        /// </summary>
        [DataMember(Name="cityTown", EmitDefaultValue=true)]
        public string CityTown { get; set; }

        /// <summary>
        /// Gets or Sets StateProvince
        /// </summary>
        [DataMember(Name="stateProvince", EmitDefaultValue=true)]
        public string StateProvince { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="countryCode", EmitDefaultValue=true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress {\n");
            sb.Append("  AddressLines: ").Append(AddressLines).Append("\n");
            sb.Append("  CityTown: ").Append(CityTown).Append("\n");
            sb.Append("  StateProvince: ").Append(StateProvince).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress);
        }

        /// <summary>
        /// Returns true if ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelProtectionQuoteRequestShipmentInfoShipperInfoAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLines == input.AddressLines ||
                    this.AddressLines != null &&
                    input.AddressLines != null &&
                    this.AddressLines.SequenceEqual(input.AddressLines)
                ) && 
                (
                    this.CityTown == input.CityTown ||
                    (this.CityTown != null &&
                    this.CityTown.Equals(input.CityTown))
                ) && 
                (
                    this.StateProvince == input.StateProvince ||
                    (this.StateProvince != null &&
                    this.StateProvince.Equals(input.StateProvince))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLines != null)
                    hashCode = hashCode * 59 + this.AddressLines.GetHashCode();
                if (this.CityTown != null)
                    hashCode = hashCode * 59 + this.CityTown.GetHashCode();
                if (this.StateProvince != null)
                    hashCode = hashCode * 59 + this.StateProvince.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
