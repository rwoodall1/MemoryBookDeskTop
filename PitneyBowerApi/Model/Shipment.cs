/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// Shipment
    /// </summary>
    [DataContract]
    public partial class Shipment :  IEquatable<Shipment>, IValidatableObject
    {
        /// <summary>
        /// Defines ShipmentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ShipmentTypeEnum
        {
            /// <summary>
            /// Enum OUTBOUND for value: OUTBOUND
            /// </summary>
            [EnumMember(Value = "OUTBOUND")]
            OUTBOUND = 1,

            /// <summary>
            /// Enum RETURN for value: RETURN
            /// </summary>
            [EnumMember(Value = "RETURN")]
            RETURN = 2

        }

        /// <summary>
        /// Gets or Sets ShipmentType
        /// </summary>
        [DataMember(Name="shipmentType", EmitDefaultValue=false)]
        public ShipmentTypeEnum? ShipmentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shipment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipment" /> class.
        /// </summary>
        /// <param name="additionalAddresses">additionalAddresses.</param>
        /// <param name="altReturnAddress">altReturnAddress.</param>
        /// <param name="carrierPayments">carrierPayments.</param>
        /// <param name="customs">customs.</param>
        /// <param name="documents">documents.</param>
        /// <param name="fromAddress">fromAddress (required).</param>
        /// <param name="hazmatDetails">hazmatDetails.</param>
        /// <param name="parcel">parcel (required).</param>
        /// <param name="parcelTrackingNumber">parcelTrackingNumber.</param>
        /// <param name="rates">rates (required).</param>
        /// <param name="references">references.</param>
        /// <param name="shipmentId">shipmentId.</param>
        /// <param name="shipmentOptions">shipmentOptions.</param>
        /// <param name="shipmentType">shipmentType.</param>
        /// <param name="soldToAddress">soldToAddress.</param>
        /// <param name="toAddress">toAddress (required).</param>
        public Shipment(List<AdditionalAddress> additionalAddresses = default(List<AdditionalAddress>), Address altReturnAddress = default(Address), List<CarrierPayment> carrierPayments = default(List<CarrierPayment>), Customs customs = default(Customs), List<Document> documents = default(List<Document>), Address fromAddress = default(Address), HazmatDetails hazmatDetails = default(HazmatDetails), Parcel parcel = default(Parcel), string parcelTrackingNumber = default(string), List<Rate> rates = default(List<Rate>), List<Parameter> references = default(List<Parameter>), string shipmentId = default(string), List<Parameter> shipmentOptions = default(List<Parameter>), ShipmentTypeEnum? shipmentType = default(ShipmentTypeEnum?), Address soldToAddress = default(Address), Address toAddress = default(Address))
        {
            // to ensure "fromAddress" is required (not null)
            if (fromAddress == null)
            {
                throw new InvalidDataException("fromAddress is a required property for Shipment and cannot be null");
            }
            else
            {
                this.FromAddress = fromAddress;
            }
            
            // to ensure "parcel" is required (not null)
            if (parcel == null)
            {
                throw new InvalidDataException("parcel is a required property for Shipment and cannot be null");
            }
            else
            {
                this.Parcel = parcel;
            }
            
            // to ensure "rates" is required (not null)
            if (rates == null)
            {
                throw new InvalidDataException("rates is a required property for Shipment and cannot be null");
            }
            else
            {
                this.Rates = rates;
            }
            
            // to ensure "toAddress" is required (not null)
            if (toAddress == null)
            {
                throw new InvalidDataException("toAddress is a required property for Shipment and cannot be null");
            }
            else
            {
                this.ToAddress = toAddress;
            }
            
            this.AdditionalAddresses = additionalAddresses;
            this.AltReturnAddress = altReturnAddress;
            this.CarrierPayments = carrierPayments;
            this.Customs = customs;
            this.Documents = documents;
            this.HazmatDetails = hazmatDetails;
            this.ParcelTrackingNumber = parcelTrackingNumber;
            this.References = references;
            this.ShipmentId = shipmentId;
            this.ShipmentOptions = shipmentOptions;
            this.ShipmentType = shipmentType;
            this.SoldToAddress = soldToAddress;
        }
        
        /// <summary>
        /// Gets or Sets AdditionalAddresses
        /// </summary>
        [DataMember(Name="additionalAddresses", EmitDefaultValue=false)]
        public List<AdditionalAddress> AdditionalAddresses { get; set; }

        /// <summary>
        /// Gets or Sets AltReturnAddress
        /// </summary>
        [DataMember(Name="altReturnAddress", EmitDefaultValue=false)]
        public Address AltReturnAddress { get; set; }

        /// <summary>
        /// Gets or Sets CarrierPayments
        /// </summary>
        [DataMember(Name="carrierPayments", EmitDefaultValue=false)]
        public List<CarrierPayment> CarrierPayments { get; set; }

        /// <summary>
        /// Gets or Sets Customs
        /// </summary>
        [DataMember(Name="customs", EmitDefaultValue=false)]
        public Customs Customs { get; set; }

        /// <summary>
        /// Gets or Sets Documents
        /// </summary>
        [DataMember(Name="documents", EmitDefaultValue=false)]
        public List<Document> Documents { get; set; }

        /// <summary>
        /// Gets or Sets FromAddress
        /// </summary>
        [DataMember(Name="fromAddress", EmitDefaultValue=true)]
        public Address FromAddress { get; set; }

        /// <summary>
        /// Gets or Sets HazmatDetails
        /// </summary>
        [DataMember(Name="hazmatDetails", EmitDefaultValue=false)]
        public HazmatDetails HazmatDetails { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [DataMember(Name="parcel", EmitDefaultValue=true)]
        public Parcel Parcel { get; set; }

        /// <summary>
        /// Gets or Sets ParcelTrackingNumber
        /// </summary>
        [DataMember(Name="parcelTrackingNumber", EmitDefaultValue=false)]
        public string ParcelTrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Rates
        /// </summary>
        [DataMember(Name="rates", EmitDefaultValue=true)]
        public List<Rate> Rates { get; set; }

        /// <summary>
        /// Gets or Sets References
        /// </summary>
        [DataMember(Name="references", EmitDefaultValue=false)]
        public List<Parameter> References { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentOptions
        /// </summary>
        [DataMember(Name="shipmentOptions", EmitDefaultValue=false)]
        public List<Parameter> ShipmentOptions { get; set; }


        /// <summary>
        /// Gets or Sets SoldToAddress
        /// </summary>
        [DataMember(Name="soldToAddress", EmitDefaultValue=false)]
        public Address SoldToAddress { get; set; }

        /// <summary>
        /// Gets or Sets ToAddress
        /// </summary>
        [DataMember(Name="toAddress", EmitDefaultValue=true)]
        public Address ToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Shipment {\n");
            sb.Append("  AdditionalAddresses: ").Append(AdditionalAddresses).Append("\n");
            sb.Append("  AltReturnAddress: ").Append(AltReturnAddress).Append("\n");
            sb.Append("  CarrierPayments: ").Append(CarrierPayments).Append("\n");
            sb.Append("  Customs: ").Append(Customs).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  HazmatDetails: ").Append(HazmatDetails).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ParcelTrackingNumber: ").Append(ParcelTrackingNumber).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  References: ").Append(References).Append("\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  ShipmentOptions: ").Append(ShipmentOptions).Append("\n");
            sb.Append("  ShipmentType: ").Append(ShipmentType).Append("\n");
            sb.Append("  SoldToAddress: ").Append(SoldToAddress).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shipment);
        }

        /// <summary>
        /// Returns true if Shipment instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdditionalAddresses == input.AdditionalAddresses ||
                    this.AdditionalAddresses != null &&
                    input.AdditionalAddresses != null &&
                    this.AdditionalAddresses.SequenceEqual(input.AdditionalAddresses)
                ) && 
                (
                    this.AltReturnAddress == input.AltReturnAddress ||
                    (this.AltReturnAddress != null &&
                    this.AltReturnAddress.Equals(input.AltReturnAddress))
                ) && 
                (
                    this.CarrierPayments == input.CarrierPayments ||
                    this.CarrierPayments != null &&
                    input.CarrierPayments != null &&
                    this.CarrierPayments.SequenceEqual(input.CarrierPayments)
                ) && 
                (
                    this.Customs == input.Customs ||
                    (this.Customs != null &&
                    this.Customs.Equals(input.Customs))
                ) && 
                (
                    this.Documents == input.Documents ||
                    this.Documents != null &&
                    input.Documents != null &&
                    this.Documents.SequenceEqual(input.Documents)
                ) && 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && 
                (
                    this.HazmatDetails == input.HazmatDetails ||
                    (this.HazmatDetails != null &&
                    this.HazmatDetails.Equals(input.HazmatDetails))
                ) && 
                (
                    this.Parcel == input.Parcel ||
                    (this.Parcel != null &&
                    this.Parcel.Equals(input.Parcel))
                ) && 
                (
                    this.ParcelTrackingNumber == input.ParcelTrackingNumber ||
                    (this.ParcelTrackingNumber != null &&
                    this.ParcelTrackingNumber.Equals(input.ParcelTrackingNumber))
                ) && 
                (
                    this.Rates == input.Rates ||
                    this.Rates != null &&
                    input.Rates != null &&
                    this.Rates.SequenceEqual(input.Rates)
                ) && 
                (
                    this.References == input.References ||
                    this.References != null &&
                    input.References != null &&
                    this.References.SequenceEqual(input.References)
                ) && 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.ShipmentOptions == input.ShipmentOptions ||
                    this.ShipmentOptions != null &&
                    input.ShipmentOptions != null &&
                    this.ShipmentOptions.SequenceEqual(input.ShipmentOptions)
                ) && 
                (
                    this.ShipmentType == input.ShipmentType ||
                    (this.ShipmentType != null &&
                    this.ShipmentType.Equals(input.ShipmentType))
                ) && 
                (
                    this.SoldToAddress == input.SoldToAddress ||
                    (this.SoldToAddress != null &&
                    this.SoldToAddress.Equals(input.SoldToAddress))
                ) && 
                (
                    this.ToAddress == input.ToAddress ||
                    (this.ToAddress != null &&
                    this.ToAddress.Equals(input.ToAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdditionalAddresses != null)
                    hashCode = hashCode * 59 + this.AdditionalAddresses.GetHashCode();
                if (this.AltReturnAddress != null)
                    hashCode = hashCode * 59 + this.AltReturnAddress.GetHashCode();
                if (this.CarrierPayments != null)
                    hashCode = hashCode * 59 + this.CarrierPayments.GetHashCode();
                if (this.Customs != null)
                    hashCode = hashCode * 59 + this.Customs.GetHashCode();
                if (this.Documents != null)
                    hashCode = hashCode * 59 + this.Documents.GetHashCode();
                if (this.FromAddress != null)
                    hashCode = hashCode * 59 + this.FromAddress.GetHashCode();
                if (this.HazmatDetails != null)
                    hashCode = hashCode * 59 + this.HazmatDetails.GetHashCode();
                if (this.Parcel != null)
                    hashCode = hashCode * 59 + this.Parcel.GetHashCode();
                if (this.ParcelTrackingNumber != null)
                    hashCode = hashCode * 59 + this.ParcelTrackingNumber.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                if (this.References != null)
                    hashCode = hashCode * 59 + this.References.GetHashCode();
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.ShipmentOptions != null)
                    hashCode = hashCode * 59 + this.ShipmentOptions.GetHashCode();
                if (this.ShipmentType != null)
                    hashCode = hashCode * 59 + this.ShipmentType.GetHashCode();
                if (this.SoldToAddress != null)
                    hashCode = hashCode * 59 + this.SoldToAddress.GetHashCode();
                if (this.ToAddress != null)
                    hashCode = hashCode * 59 + this.ToAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
