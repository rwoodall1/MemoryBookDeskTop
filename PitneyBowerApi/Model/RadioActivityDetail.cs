/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// RadioActivityDetail
    /// </summary>
    [DataContract]
    public partial class RadioActivityDetail :  IEquatable<RadioActivityDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RadioActivityDetail" /> class.
        /// </summary>
        /// <param name="criticalitySafetyIndex">criticalitySafetyIndex.</param>
        /// <param name="radioActiveParcelDimension">radioActiveParcelDimension.</param>
        /// <param name="surfaceReading">surfaceReading.</param>
        /// <param name="transportIndex">transportIndex.</param>
        public RadioActivityDetail(decimal criticalitySafetyIndex = default(decimal), RadioActiveParcelDimension radioActiveParcelDimension = default(RadioActiveParcelDimension), decimal surfaceReading = default(decimal), decimal transportIndex = default(decimal))
        {
            this.CriticalitySafetyIndex = criticalitySafetyIndex;
            this.RadioActiveParcelDimension = radioActiveParcelDimension;
            this.SurfaceReading = surfaceReading;
            this.TransportIndex = transportIndex;
        }
        
        /// <summary>
        /// Gets or Sets CriticalitySafetyIndex
        /// </summary>
        [DataMember(Name="criticalitySafetyIndex", EmitDefaultValue=false)]
        public decimal CriticalitySafetyIndex { get; set; }

        /// <summary>
        /// Gets or Sets RadioActiveParcelDimension
        /// </summary>
        [DataMember(Name="radioActiveParcelDimension", EmitDefaultValue=false)]
        public RadioActiveParcelDimension RadioActiveParcelDimension { get; set; }

        /// <summary>
        /// Gets or Sets SurfaceReading
        /// </summary>
        [DataMember(Name="surfaceReading", EmitDefaultValue=false)]
        public decimal SurfaceReading { get; set; }

        /// <summary>
        /// Gets or Sets TransportIndex
        /// </summary>
        [DataMember(Name="transportIndex", EmitDefaultValue=false)]
        public decimal TransportIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadioActivityDetail {\n");
            sb.Append("  CriticalitySafetyIndex: ").Append(CriticalitySafetyIndex).Append("\n");
            sb.Append("  RadioActiveParcelDimension: ").Append(RadioActiveParcelDimension).Append("\n");
            sb.Append("  SurfaceReading: ").Append(SurfaceReading).Append("\n");
            sb.Append("  TransportIndex: ").Append(TransportIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RadioActivityDetail);
        }

        /// <summary>
        /// Returns true if RadioActivityDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of RadioActivityDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadioActivityDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CriticalitySafetyIndex == input.CriticalitySafetyIndex ||
                    (this.CriticalitySafetyIndex != null &&
                    this.CriticalitySafetyIndex.Equals(input.CriticalitySafetyIndex))
                ) && 
                (
                    this.RadioActiveParcelDimension == input.RadioActiveParcelDimension ||
                    (this.RadioActiveParcelDimension != null &&
                    this.RadioActiveParcelDimension.Equals(input.RadioActiveParcelDimension))
                ) && 
                (
                    this.SurfaceReading == input.SurfaceReading ||
                    (this.SurfaceReading != null &&
                    this.SurfaceReading.Equals(input.SurfaceReading))
                ) && 
                (
                    this.TransportIndex == input.TransportIndex ||
                    (this.TransportIndex != null &&
                    this.TransportIndex.Equals(input.TransportIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CriticalitySafetyIndex != null)
                    hashCode = hashCode * 59 + this.CriticalitySafetyIndex.GetHashCode();
                if (this.RadioActiveParcelDimension != null)
                    hashCode = hashCode * 59 + this.RadioActiveParcelDimension.GetHashCode();
                if (this.SurfaceReading != null)
                    hashCode = hashCode * 59 + this.SurfaceReading.GetHashCode();
                if (this.TransportIndex != null)
                    hashCode = hashCode * 59 + this.TransportIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
