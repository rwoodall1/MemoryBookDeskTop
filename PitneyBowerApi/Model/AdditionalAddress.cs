/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// AdditionalAddress
    /// </summary>
    [DataContract]
    public partial class AdditionalAddress :  IEquatable<AdditionalAddress>, IValidatableObject
    {
        /// <summary>
        /// Defines AddressType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddressTypeEnum
        {
            /// <summary>
            /// Enum HOLD for value: HOLD
            /// </summary>
            [EnumMember(Value = "HOLD")]
            HOLD = 1,

            /// <summary>
            /// Enum BROKER for value: BROKER
            /// </summary>
            [EnumMember(Value = "BROKER")]
            BROKER = 2,

            /// <summary>
            /// Enum THIRDPARTY for value: THIRD_PARTY
            /// </summary>
            [EnumMember(Value = "THIRD_PARTY")]
            THIRDPARTY = 3,

            /// <summary>
            /// Enum PICKUP for value: PICKUP
            /// </summary>
            [EnumMember(Value = "PICKUP")]
            PICKUP = 4,

            /// <summary>
            /// Enum EXPORTER for value: EXPORTER
            /// </summary>
            [EnumMember(Value = "EXPORTER")]
            EXPORTER = 5

        }

        /// <summary>
        /// Gets or Sets AddressType
        /// </summary>
        [DataMember(Name="addressType", EmitDefaultValue=true)]
        public AddressTypeEnum AddressType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AdditionalAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalAddress" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="addressType">addressType (required).</param>
        public AdditionalAddress(Address address = default(Address), AddressTypeEnum addressType = default(AddressTypeEnum))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for AdditionalAddress and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            
            // to ensure "addressType" is required (not null)
            if (addressType == null)
            {
                throw new InvalidDataException("addressType is a required property for AdditionalAddress and cannot be null");
            }
            else
            {
                this.AddressType = addressType;
            }
            
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=true)]
        public Address Address { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalAddress {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalAddress);
        }

        /// <summary>
        /// Returns true if AdditionalAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AddressType == input.AddressType ||
                    (this.AddressType != null &&
                    this.AddressType.Equals(input.AddressType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AddressType != null)
                    hashCode = hashCode * 59 + this.AddressType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
