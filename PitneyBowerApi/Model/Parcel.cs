/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// Parcel
    /// </summary>
    [DataContract]
    public partial class Parcel :  IEquatable<Parcel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Parcel" /> class.
        /// </summary>
        /// <param name="dimension">dimension.</param>
        /// <param name="weight">weight.</param>
        /// <param name="valueOfGoods">valueOfGoods.</param>
        /// <param name="currencyCode">Currency code as per [IOS 4217](https://en.wikipedia.org/wiki/ISO_4217).</param>
        public Parcel(ParcelDimension dimension = default(ParcelDimension), ParcelWeight weight = default(ParcelWeight), decimal valueOfGoods = default(decimal), string currencyCode = default(string))
        {
            this.Dimension = dimension;
            this.Weight = weight;
            this.ValueOfGoods = valueOfGoods;
            this.CurrencyCode = currencyCode;
        }
        
        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name="dimension", EmitDefaultValue=false)]
        public ParcelDimension Dimension { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public ParcelWeight Weight { get; set; }

        /// <summary>
        /// Gets or Sets ValueOfGoods
        /// </summary>
        [DataMember(Name="valueOfGoods", EmitDefaultValue=false)]
        public decimal ValueOfGoods { get; set; }

        /// <summary>
        /// Currency code as per [IOS 4217](https://en.wikipedia.org/wiki/ISO_4217)
        /// </summary>
        /// <value>Currency code as per [IOS 4217](https://en.wikipedia.org/wiki/ISO_4217)</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Parcel {\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ValueOfGoods: ").Append(ValueOfGoods).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Parcel);
        }

        /// <summary>
        /// Returns true if Parcel instances are equal
        /// </summary>
        /// <param name="input">Instance of Parcel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Parcel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dimension == input.Dimension ||
                    (this.Dimension != null &&
                    this.Dimension.Equals(input.Dimension))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.ValueOfGoods == input.ValueOfGoods ||
                    (this.ValueOfGoods != null &&
                    this.ValueOfGoods.Equals(input.ValueOfGoods))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dimension != null)
                    hashCode = hashCode * 59 + this.Dimension.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.ValueOfGoods != null)
                    hashCode = hashCode * 59 + this.ValueOfGoods.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
