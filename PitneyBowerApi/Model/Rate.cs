/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = pitneyBower.Client.OpenAPIDateConverter;

namespace pitneyBower.Model
{
    /// <summary>
    /// Rate
    /// </summary>
    [DataContract]
    public partial class Rate :  IEquatable<Rate>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Carrier
        /// </summary>
        [DataMember(Name="carrier", EmitDefaultValue=true)]
        public Carrier Carrier { get; set; }
        /// <summary>
        /// Gets or Sets ParcelType
        /// </summary>
        [DataMember(Name="parcelType", EmitDefaultValue=true)]
        public ParcelType ParcelType { get; set; }
        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public Services? ServiceId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Rate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Rate" /> class.
        /// </summary>
        /// <param name="alternateBaseCharge">alternateBaseCharge.</param>
        /// <param name="alternateTotalCharge">alternateTotalCharge.</param>
        /// <param name="baseCharge">baseCharge.</param>
        /// <param name="baseChargeTaxes">baseChargeTaxes.</param>
        /// <param name="carrier">carrier (required).</param>
        /// <param name="currencyCode">ISO-4217.</param>
        /// <param name="deliveryCommitment">deliveryCommitment.</param>
        /// <param name="destinationZone">destinationZone.</param>
        /// <param name="dimensionalWeight">dimensionalWeight.</param>
        /// <param name="discounts">discounts.</param>
        /// <param name="inductionPostalCode">inductionPostalCode.</param>
        /// <param name="parcelType">parcelType (required).</param>
        /// <param name="rateTypeId">rateTypeId.</param>
        /// <param name="serviceId">serviceId.</param>
        /// <param name="specialServices">specialServices.</param>
        /// <param name="surcharges">surcharges.</param>
        /// <param name="totalCarrierCharge">totalCarrierCharge.</param>
        /// <param name="totalTaxAmount">totalTaxAmount.</param>
        public Rate(decimal alternateBaseCharge = default(decimal), decimal alternateTotalCharge = default(decimal), decimal baseCharge = default(decimal), List<Tax> baseChargeTaxes = default(List<Tax>), Carrier carrier = default(Carrier), string currencyCode = default(string), DeliveryCommitment deliveryCommitment = default(DeliveryCommitment), decimal destinationZone = default(decimal), ParcelWeight dimensionalWeight = default(ParcelWeight), List<Discount> discounts = default(List<Discount>), string inductionPostalCode = default(string), ParcelType parcelType = default(ParcelType), string rateTypeId = default(string), Services? serviceId = default(Services?), List<SpecialService> specialServices = default(List<SpecialService>), List<Surcharge> surcharges = default(List<Surcharge>), decimal totalCarrierCharge = default(decimal), decimal totalTaxAmount = default(decimal))
        {
            // to ensure "carrier" is required (not null)
            if (carrier == null)
            {
                throw new InvalidDataException("carrier is a required property for Rate and cannot be null");
            }
            else
            {
                this.Carrier = carrier;
            }
            
            // to ensure "parcelType" is required (not null)
            if (parcelType == null)
            {
                throw new InvalidDataException("parcelType is a required property for Rate and cannot be null");
            }
            else
            {
                this.ParcelType = parcelType;
            }
            
            this.AlternateBaseCharge = alternateBaseCharge;
            this.AlternateTotalCharge = alternateTotalCharge;
            this.BaseCharge = baseCharge;
            this.BaseChargeTaxes = baseChargeTaxes;
            this.CurrencyCode = currencyCode;
            this.DeliveryCommitment = deliveryCommitment;
            this.DestinationZone = destinationZone;
            this.DimensionalWeight = dimensionalWeight;
            this.Discounts = discounts;
            this.InductionPostalCode = inductionPostalCode;
            this.RateTypeId = rateTypeId;
            this.ServiceId = serviceId;
            this.SpecialServices = specialServices;
            this.Surcharges = surcharges;
            this.TotalCarrierCharge = totalCarrierCharge;
            this.TotalTaxAmount = totalTaxAmount;
        }
        
        /// <summary>
        /// Gets or Sets AlternateBaseCharge
        /// </summary>
        [DataMember(Name="alternateBaseCharge", EmitDefaultValue=false)]
        public decimal AlternateBaseCharge { get; set; }

        /// <summary>
        /// Gets or Sets AlternateTotalCharge
        /// </summary>
        [DataMember(Name="alternateTotalCharge", EmitDefaultValue=false)]
        public decimal AlternateTotalCharge { get; set; }

        /// <summary>
        /// Gets or Sets BaseCharge
        /// </summary>
        [DataMember(Name="baseCharge", EmitDefaultValue=false)]
        public decimal BaseCharge { get; set; }

        /// <summary>
        /// Gets or Sets BaseChargeTaxes
        /// </summary>
        [DataMember(Name="baseChargeTaxes", EmitDefaultValue=false)]
        public List<Tax> BaseChargeTaxes { get; set; }


        /// <summary>
        /// ISO-4217
        /// </summary>
        /// <value>ISO-4217</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryCommitment
        /// </summary>
        [DataMember(Name="deliveryCommitment", EmitDefaultValue=false)]
        public DeliveryCommitment DeliveryCommitment { get; set; }

        /// <summary>
        /// Gets or Sets DestinationZone
        /// </summary>
        [DataMember(Name="destinationZone", EmitDefaultValue=false)]
        public decimal DestinationZone { get; set; }

        /// <summary>
        /// Gets or Sets DimensionalWeight
        /// </summary>
        [DataMember(Name="dimensionalWeight", EmitDefaultValue=false)]
        public ParcelWeight DimensionalWeight { get; set; }

        /// <summary>
        /// Gets or Sets Discounts
        /// </summary>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<Discount> Discounts { get; set; }

        /// <summary>
        /// Gets or Sets InductionPostalCode
        /// </summary>
        [DataMember(Name="inductionPostalCode", EmitDefaultValue=false)]
        public string InductionPostalCode { get; set; }


        /// <summary>
        /// Gets or Sets RateTypeId
        /// </summary>
        [DataMember(Name="rateTypeId", EmitDefaultValue=false)]
        public string RateTypeId { get; set; }


        /// <summary>
        /// Gets or Sets SpecialServices
        /// </summary>
        [DataMember(Name="specialServices", EmitDefaultValue=false)]
        public List<SpecialService> SpecialServices { get; set; }

        /// <summary>
        /// Gets or Sets Surcharges
        /// </summary>
        [DataMember(Name="surcharges", EmitDefaultValue=false)]
        public List<Surcharge> Surcharges { get; set; }

        /// <summary>
        /// Gets or Sets TotalCarrierCharge
        /// </summary>
        [DataMember(Name="totalCarrierCharge", EmitDefaultValue=false)]
        public decimal TotalCarrierCharge { get; set; }

        /// <summary>
        /// Gets or Sets TotalTaxAmount
        /// </summary>
        [DataMember(Name="totalTaxAmount", EmitDefaultValue=false)]
        public decimal TotalTaxAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Rate {\n");
            sb.Append("  AlternateBaseCharge: ").Append(AlternateBaseCharge).Append("\n");
            sb.Append("  AlternateTotalCharge: ").Append(AlternateTotalCharge).Append("\n");
            sb.Append("  BaseCharge: ").Append(BaseCharge).Append("\n");
            sb.Append("  BaseChargeTaxes: ").Append(BaseChargeTaxes).Append("\n");
            sb.Append("  Carrier: ").Append(Carrier).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DeliveryCommitment: ").Append(DeliveryCommitment).Append("\n");
            sb.Append("  DestinationZone: ").Append(DestinationZone).Append("\n");
            sb.Append("  DimensionalWeight: ").Append(DimensionalWeight).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  InductionPostalCode: ").Append(InductionPostalCode).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  RateTypeId: ").Append(RateTypeId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  SpecialServices: ").Append(SpecialServices).Append("\n");
            sb.Append("  Surcharges: ").Append(Surcharges).Append("\n");
            sb.Append("  TotalCarrierCharge: ").Append(TotalCarrierCharge).Append("\n");
            sb.Append("  TotalTaxAmount: ").Append(TotalTaxAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Rate);
        }

        /// <summary>
        /// Returns true if Rate instances are equal
        /// </summary>
        /// <param name="input">Instance of Rate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Rate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlternateBaseCharge == input.AlternateBaseCharge ||
                    (this.AlternateBaseCharge != null &&
                    this.AlternateBaseCharge.Equals(input.AlternateBaseCharge))
                ) && 
                (
                    this.AlternateTotalCharge == input.AlternateTotalCharge ||
                    (this.AlternateTotalCharge != null &&
                    this.AlternateTotalCharge.Equals(input.AlternateTotalCharge))
                ) && 
                (
                    this.BaseCharge == input.BaseCharge ||
                    (this.BaseCharge != null &&
                    this.BaseCharge.Equals(input.BaseCharge))
                ) && 
                (
                    this.BaseChargeTaxes == input.BaseChargeTaxes ||
                    this.BaseChargeTaxes != null &&
                    input.BaseChargeTaxes != null &&
                    this.BaseChargeTaxes.SequenceEqual(input.BaseChargeTaxes)
                ) && 
                (
                    this.Carrier == input.Carrier ||
                    (this.Carrier != null &&
                    this.Carrier.Equals(input.Carrier))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DeliveryCommitment == input.DeliveryCommitment ||
                    (this.DeliveryCommitment != null &&
                    this.DeliveryCommitment.Equals(input.DeliveryCommitment))
                ) && 
                (
                    this.DestinationZone == input.DestinationZone ||
                    (this.DestinationZone != null &&
                    this.DestinationZone.Equals(input.DestinationZone))
                ) && 
                (
                    this.DimensionalWeight == input.DimensionalWeight ||
                    (this.DimensionalWeight != null &&
                    this.DimensionalWeight.Equals(input.DimensionalWeight))
                ) && 
                (
                    this.Discounts == input.Discounts ||
                    this.Discounts != null &&
                    input.Discounts != null &&
                    this.Discounts.SequenceEqual(input.Discounts)
                ) && 
                (
                    this.InductionPostalCode == input.InductionPostalCode ||
                    (this.InductionPostalCode != null &&
                    this.InductionPostalCode.Equals(input.InductionPostalCode))
                ) && 
                (
                    this.ParcelType == input.ParcelType ||
                    (this.ParcelType != null &&
                    this.ParcelType.Equals(input.ParcelType))
                ) && 
                (
                    this.RateTypeId == input.RateTypeId ||
                    (this.RateTypeId != null &&
                    this.RateTypeId.Equals(input.RateTypeId))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.SpecialServices == input.SpecialServices ||
                    this.SpecialServices != null &&
                    input.SpecialServices != null &&
                    this.SpecialServices.SequenceEqual(input.SpecialServices)
                ) && 
                (
                    this.Surcharges == input.Surcharges ||
                    this.Surcharges != null &&
                    input.Surcharges != null &&
                    this.Surcharges.SequenceEqual(input.Surcharges)
                ) && 
                (
                    this.TotalCarrierCharge == input.TotalCarrierCharge ||
                    (this.TotalCarrierCharge != null &&
                    this.TotalCarrierCharge.Equals(input.TotalCarrierCharge))
                ) && 
                (
                    this.TotalTaxAmount == input.TotalTaxAmount ||
                    (this.TotalTaxAmount != null &&
                    this.TotalTaxAmount.Equals(input.TotalTaxAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlternateBaseCharge != null)
                    hashCode = hashCode * 59 + this.AlternateBaseCharge.GetHashCode();
                if (this.AlternateTotalCharge != null)
                    hashCode = hashCode * 59 + this.AlternateTotalCharge.GetHashCode();
                if (this.BaseCharge != null)
                    hashCode = hashCode * 59 + this.BaseCharge.GetHashCode();
                if (this.BaseChargeTaxes != null)
                    hashCode = hashCode * 59 + this.BaseChargeTaxes.GetHashCode();
                if (this.Carrier != null)
                    hashCode = hashCode * 59 + this.Carrier.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.DeliveryCommitment != null)
                    hashCode = hashCode * 59 + this.DeliveryCommitment.GetHashCode();
                if (this.DestinationZone != null)
                    hashCode = hashCode * 59 + this.DestinationZone.GetHashCode();
                if (this.DimensionalWeight != null)
                    hashCode = hashCode * 59 + this.DimensionalWeight.GetHashCode();
                if (this.Discounts != null)
                    hashCode = hashCode * 59 + this.Discounts.GetHashCode();
                if (this.InductionPostalCode != null)
                    hashCode = hashCode * 59 + this.InductionPostalCode.GetHashCode();
                if (this.ParcelType != null)
                    hashCode = hashCode * 59 + this.ParcelType.GetHashCode();
                if (this.RateTypeId != null)
                    hashCode = hashCode * 59 + this.RateTypeId.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.SpecialServices != null)
                    hashCode = hashCode * 59 + this.SpecialServices.GetHashCode();
                if (this.Surcharges != null)
                    hashCode = hashCode * 59 + this.Surcharges.GetHashCode();
                if (this.TotalCarrierCharge != null)
                    hashCode = hashCode * 59 + this.TotalCarrierCharge.GetHashCode();
                if (this.TotalTaxAmount != null)
                    hashCode = hashCode * 59 + this.TotalTaxAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
