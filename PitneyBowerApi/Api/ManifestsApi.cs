/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pitneyBower.Client;
using pitneyBower.Model;

namespace pitneyBower.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManifestsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This operation creates an end-of-day manifest
        /// </summary>
        /// <remarks>
        /// This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Manifest</returns>
        Manifest CreateManifest (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// This operation creates an end-of-day manifest
        /// </summary>
        /// <remarks>
        /// This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of Manifest</returns>
        ApiResponse<Manifest> CreateManifestWithHttpInfo (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// reprintManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Manifest</returns>
        Manifest ReprintManifest (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// reprintManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of Manifest</returns>
        ApiResponse<Manifest> ReprintManifestWithHttpInfo (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// retryManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Manifest</returns>
        Manifest RetryManifest (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// retryManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of Manifest</returns>
        ApiResponse<Manifest> RetryManifestWithHttpInfo (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This operation creates an end-of-day manifest
        /// </summary>
        /// <remarks>
        /// This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of Manifest</returns>
        System.Threading.Tasks.Task<Manifest> CreateManifestAsync (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// This operation creates an end-of-day manifest
        /// </summary>
        /// <remarks>
        /// This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        System.Threading.Tasks.Task<ApiResponse<Manifest>> CreateManifestAsyncWithHttpInfo (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// reprintManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of Manifest</returns>
        System.Threading.Tasks.Task<Manifest> ReprintManifestAsync (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// reprintManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        System.Threading.Tasks.Task<ApiResponse<Manifest>> ReprintManifestAsyncWithHttpInfo (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// retryManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of Manifest</returns>
        System.Threading.Tasks.Task<Manifest> RetryManifestAsync (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// retryManifest
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        System.Threading.Tasks.Task<ApiResponse<Manifest>> RetryManifestAsyncWithHttpInfo (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManifestsApi : IManifestsApi
    {
        private pitneyBower.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManifestsApi(String basePath)
        {
            this.Configuration = new pitneyBower.Client.Configuration { BasePath = basePath };

            ExceptionFactory = pitneyBower.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ManifestsApi()
        {
            this.Configuration = pitneyBower.Client.Configuration.Default;

            ExceptionFactory = pitneyBower.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManifestsApi(pitneyBower.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = pitneyBower.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pitneyBower.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pitneyBower.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pitneyBower.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This operation creates an end-of-day manifest This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Manifest</returns>
        public Manifest CreateManifest (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<Manifest> localVarResponse = CreateManifestWithHttpInfo(xPBTransactionId, manifest, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This operation creates an end-of-day manifest This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of Manifest</returns>
        public ApiResponse<Manifest> CreateManifestWithHttpInfo (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'xPBTransactionId' is set
            if (xPBTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xPBTransactionId' when calling ManifestsApi->CreateManifest");
            // verify the required parameter 'manifest' is set
            if (manifest == null)
                throw new ApiException(400, "Missing required parameter 'manifest' when calling ManifestsApi->CreateManifest");

            var localVarPath = "/v1/manifests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter
            if (xPBTransactionId != null) localVarHeaderParams.Add("X-PB-TransactionId", this.Configuration.ApiClient.ParameterToString(xPBTransactionId)); // header parameter
            if (manifest != null && manifest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(manifest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = manifest; // byte array
            }

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Manifest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Manifest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Manifest)));
        }

        /// <summary>
        /// This operation creates an end-of-day manifest This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of Manifest</returns>
        public async System.Threading.Tasks.Task<Manifest> CreateManifestAsync (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<Manifest> localVarResponse = await CreateManifestAsyncWithHttpInfo(xPBTransactionId, manifest, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This operation creates an end-of-day manifest This operation creates an end-of-day manifest that either combines all parcels into a single form or electronically closes the day, depending on the carrier. Use the instructions appropriate to the carrier. * Create a [USPS SCAN Form](https://shipping.pitneybowes.com/api/post-manifests-scan.html)  * Create a [Newgistics Closeout](https://shipping.pitneybowes.com/api/post-manifests-newgistics.html) * Create a [PB Presort Pickup Slip](https://shipping.pitneybowes.com/api/post-manifests-presort.html) * Create a [Manifest for PMOD Shipments](https://shipping.pitneybowes.com/api/post-manifests-pmod.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xPBTransactionId">Required. A unique identifier for the transaction, up to 25 characters.</param>
        /// <param name="manifest">manifest</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Manifest>> CreateManifestAsyncWithHttpInfo (string xPBTransactionId, Manifest manifest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'xPBTransactionId' is set
            if (xPBTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'xPBTransactionId' when calling ManifestsApi->CreateManifest");
            // verify the required parameter 'manifest' is set
            if (manifest == null)
                throw new ApiException(400, "Missing required parameter 'manifest' when calling ManifestsApi->CreateManifest");

            var localVarPath = "/v1/manifests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter
            if (xPBTransactionId != null) localVarHeaderParams.Add("X-PB-TransactionId", this.Configuration.ApiClient.ParameterToString(xPBTransactionId)); // header parameter
            if (manifest != null && manifest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(manifest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = manifest; // byte array
            }

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Manifest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Manifest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Manifest)));
        }

        /// <summary>
        /// reprintManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Manifest</returns>
        public Manifest ReprintManifest (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<Manifest> localVarResponse = ReprintManifestWithHttpInfo(manifestId, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// reprintManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of Manifest</returns>
        public ApiResponse<Manifest> ReprintManifestWithHttpInfo (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'manifestId' is set
            if (manifestId == null)
                throw new ApiException(400, "Missing required parameter 'manifestId' when calling ManifestsApi->ReprintManifest");

            var localVarPath = "/v1/manifests/{manifestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (manifestId != null) localVarPathParams.Add("manifestId", this.Configuration.ApiClient.ParameterToString(manifestId)); // path parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReprintManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Manifest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Manifest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Manifest)));
        }

        /// <summary>
        /// reprintManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of Manifest</returns>
        public async System.Threading.Tasks.Task<Manifest> ReprintManifestAsync (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<Manifest> localVarResponse = await ReprintManifestAsyncWithHttpInfo(manifestId, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// reprintManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="manifestId">manifestId</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Manifest>> ReprintManifestAsyncWithHttpInfo (string manifestId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'manifestId' is set
            if (manifestId == null)
                throw new ApiException(400, "Missing required parameter 'manifestId' when calling ManifestsApi->ReprintManifest");

            var localVarPath = "/v1/manifests/{manifestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (manifestId != null) localVarPathParams.Add("manifestId", this.Configuration.ApiClient.ParameterToString(manifestId)); // path parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReprintManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Manifest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Manifest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Manifest)));
        }

        /// <summary>
        /// retryManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Manifest</returns>
        public Manifest RetryManifest (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<Manifest> localVarResponse = RetryManifestWithHttpInfo(originalTransactionId, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retryManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of Manifest</returns>
        public ApiResponse<Manifest> RetryManifestWithHttpInfo (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'originalTransactionId' is set
            if (originalTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'originalTransactionId' when calling ManifestsApi->RetryManifest");

            var localVarPath = "/v1/manifests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (originalTransactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalTransactionId", originalTransactionId)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Manifest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Manifest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Manifest)));
        }

        /// <summary>
        /// retryManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of Manifest</returns>
        public async System.Threading.Tasks.Task<Manifest> RetryManifestAsync (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<Manifest> localVarResponse = await RetryManifestAsyncWithHttpInfo(originalTransactionId, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retryManifest 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="originalTransactionId"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Manifest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Manifest>> RetryManifestAsyncWithHttpInfo (string originalTransactionId, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'originalTransactionId' is set
            if (originalTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'originalTransactionId' when calling ManifestsApi->RetryManifest");

            var localVarPath = "/v1/manifests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (originalTransactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalTransactionId", originalTransactionId)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetryManifest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Manifest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Manifest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Manifest)));
        }

    }
}
