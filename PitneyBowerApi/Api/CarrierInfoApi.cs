/* 
 * Shipping API
 *
 * Shipping API Sample.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@pb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using pitneyBower.Client;
using pitneyBower.Model;

namespace pitneyBower.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICarrierInfoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Find Carrier Facilities
        /// </summary>
        /// <remarks>
        /// This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>CarrierFacilityResponse</returns>
        CarrierFacilityResponse GetCarrierFacilities (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// Find Carrier Facilities
        /// </summary>
        /// <remarks>
        /// This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of CarrierFacilityResponse</returns>
        ApiResponse<CarrierFacilityResponse> GetCarrierFacilitiesWithHttpInfo (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetCarrierLicenseAgreement (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetCarrierLicenseAgreementWithHttpInfo (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>CarrierRule</returns>
        CarrierRule GetCarrierServiceRules (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?));

        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>ApiResponse of CarrierRule</returns>
        ApiResponse<CarrierRule> GetCarrierServiceRulesWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?));
        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetCarrierSupportedDestination (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetCarrierSupportedDestinationWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Find Carrier Facilities
        /// </summary>
        /// <remarks>
        /// This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of CarrierFacilityResponse</returns>
        System.Threading.Tasks.Task<CarrierFacilityResponse> GetCarrierFacilitiesAsync (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// Find Carrier Facilities
        /// </summary>
        /// <remarks>
        /// This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (CarrierFacilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CarrierFacilityResponse>> GetCarrierFacilitiesAsyncWithHttpInfo (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetCarrierLicenseAgreementAsync (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCarrierLicenseAgreementAsyncWithHttpInfo (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));
        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>Task of CarrierRule</returns>
        System.Threading.Tasks.Task<CarrierRule> GetCarrierServiceRulesAsync (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?));

        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>Task of ApiResponse (CarrierRule)</returns>
        System.Threading.Tasks.Task<ApiResponse<CarrierRule>> GetCarrierServiceRulesAsyncWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?));
        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetCarrierSupportedDestinationAsync (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));

        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCarrierSupportedDestinationAsyncWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CarrierInfoApi : ICarrierInfoApi
    {
        private pitneyBower.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CarrierInfoApi(String basePath)
        {
            this.Configuration = new pitneyBower.Client.Configuration { BasePath = basePath };

            ExceptionFactory = pitneyBower.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierInfoApi"/> class
        /// </summary>
        /// <returns></returns>
        public CarrierInfoApi()
        {
            this.Configuration = pitneyBower.Client.Configuration.Default;

            ExceptionFactory = pitneyBower.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CarrierInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CarrierInfoApi(pitneyBower.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = pitneyBower.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = pitneyBower.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public pitneyBower.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public pitneyBower.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Find Carrier Facilities This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>CarrierFacilityResponse</returns>
        public CarrierFacilityResponse GetCarrierFacilities (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<CarrierFacilityResponse> localVarResponse = GetCarrierFacilitiesWithHttpInfo(carrierFacilityRequest, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Carrier Facilities This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of CarrierFacilityResponse</returns>
        public ApiResponse<CarrierFacilityResponse> GetCarrierFacilitiesWithHttpInfo (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'carrierFacilityRequest' is set
            if (carrierFacilityRequest == null)
                throw new ApiException(400, "Missing required parameter 'carrierFacilityRequest' when calling CarrierInfoApi->GetCarrierFacilities");

            var localVarPath = "/v1/carrier-facility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter
            if (carrierFacilityRequest != null && carrierFacilityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(carrierFacilityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = carrierFacilityRequest; // byte array
            }

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierFacilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierFacilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierFacilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierFacilityResponse)));
        }

        /// <summary>
        /// Find Carrier Facilities This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of CarrierFacilityResponse</returns>
        public async System.Threading.Tasks.Task<CarrierFacilityResponse> GetCarrierFacilitiesAsync (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<CarrierFacilityResponse> localVarResponse = await GetCarrierFacilitiesAsyncWithHttpInfo(carrierFacilityRequest, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Carrier Facilities This operation locates Post Offices and other facilities for a given carrier. You can use this operation, for example, to locate all USPS Post Offices near to a given postal code.If you use the Standard Return API and if you use the option to print a QR code, use this API to locate facilities where the buyer can print the label from the QR code.
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrierFacilityRequest"></param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (CarrierFacilityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CarrierFacilityResponse>> GetCarrierFacilitiesAsyncWithHttpInfo (CarrierFacilityRequest carrierFacilityRequest, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'carrierFacilityRequest' is set
            if (carrierFacilityRequest == null)
                throw new ApiException(400, "Missing required parameter 'carrierFacilityRequest' when calling CarrierInfoApi->GetCarrierFacilities");

            var localVarPath = "/v1/carrier-facility";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter
            if (carrierFacilityRequest != null && carrierFacilityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(carrierFacilityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = carrierFacilityRequest; // byte array
            }

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierFacilities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierFacilityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierFacilityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierFacilityResponse)));
        }

        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement. This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetCarrierLicenseAgreement (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<InlineResponse200> localVarResponse = GetCarrierLicenseAgreementWithHttpInfo(carrier, originCountryCode, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement. This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> GetCarrierLicenseAgreementWithHttpInfo (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'carrier' is set
            if (carrier == null)
                throw new ApiException(400, "Missing required parameter 'carrier' when calling CarrierInfoApi->GetCarrierLicenseAgreement");
            // verify the required parameter 'originCountryCode' is set
            if (originCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'originCountryCode' when calling CarrierInfoApi->GetCarrierLicenseAgreement");

            var localVarPath = "/v1/carrier/license-agreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrier", carrier)); // query parameter
            if (originCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originCountryCode", originCountryCode)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierLicenseAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement. This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetCarrierLicenseAgreementAsync (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetCarrierLicenseAgreementAsyncWithHttpInfo(carrier, originCountryCode, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This operation retrieves a carrier&#39;s license agreement. This operation retrieves a carrier&#39;s license agreement. The operation is used in the [Carrier Registration Tutorial](https://shipping.pitneybowes.com/carrier-registration.html).
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: UPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCarrierLicenseAgreementAsyncWithHttpInfo (string carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'carrier' is set
            if (carrier == null)
                throw new ApiException(400, "Missing required parameter 'carrier' when calling CarrierInfoApi->GetCarrierLicenseAgreement");
            // verify the required parameter 'originCountryCode' is set
            if (originCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'originCountryCode' when calling CarrierInfoApi->GetCarrierLicenseAgreement");

            var localVarPath = "/v1/carrier/license-agreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrier", carrier)); // query parameter
            if (originCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originCountryCode", originCountryCode)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierLicenseAgreement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services. This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>CarrierRule</returns>
        public CarrierRule GetCarrierServiceRules (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?))
        {
             ApiResponse<CarrierRule> localVarResponse = GetCarrierServiceRulesWithHttpInfo(carrier, originCountryCode, destinationCountryCode, xPBUnifiedErrorStructure, rateTypeId, futureShipmentDate, returnShipment, compactResponse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services. This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>ApiResponse of CarrierRule</returns>
        public ApiResponse<CarrierRule> GetCarrierServiceRulesWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?))
        {
            // verify the required parameter 'carrier' is set
            if (carrier == null)
                throw new ApiException(400, "Missing required parameter 'carrier' when calling CarrierInfoApi->GetCarrierServiceRules");
            // verify the required parameter 'originCountryCode' is set
            if (originCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'originCountryCode' when calling CarrierInfoApi->GetCarrierServiceRules");
            // verify the required parameter 'destinationCountryCode' is set
            if (destinationCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'destinationCountryCode' when calling CarrierInfoApi->GetCarrierServiceRules");

            var localVarPath = "/v1/information/rules/rating-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrier", carrier)); // query parameter
            if (originCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originCountryCode", originCountryCode)); // query parameter
            if (destinationCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationCountryCode", destinationCountryCode)); // query parameter
            if (rateTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rateTypeId", rateTypeId)); // query parameter
            if (futureShipmentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "futureShipmentDate", futureShipmentDate)); // query parameter
            if (returnShipment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnShipment", returnShipment)); // query parameter
            if (compactResponse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compactResponse", compactResponse)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierServiceRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierRule)));
        }

        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services. This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>Task of CarrierRule</returns>
        public async System.Threading.Tasks.Task<CarrierRule> GetCarrierServiceRulesAsync (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?))
        {
             ApiResponse<CarrierRule> localVarResponse = await GetCarrierServiceRulesAsyncWithHttpInfo(carrier, originCountryCode, destinationCountryCode, xPBUnifiedErrorStructure, rateTypeId, futureShipmentDate, returnShipment, compactResponse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves the rules governing the carrier&#39;s services. This operation retrieves the rules governing the carrier&#39;s services, including the available parcel types and the limits on weights and dimensions. **This API currently returns rules only for USPS** . Find more information at [Get Carrier Rules](https://shipping.pitneybowes.com/api/get-carrier-rules.html)
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. **Currently this must be set to: USPS** </param>
        /// <param name="originCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country where the shipment originates.</param>
        /// <param name="destinationCountryCode">The [two-character ISO country code](https://www.iso.org/obp/ui/#search) for the country of the shipment&#39;s destination address.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <param name="rateTypeId">The type of rate requested, such as COMMERCIAL_BASE. If a rate type is not specified, all eligible rate types are returned. (optional)</param>
        /// <param name="futureShipmentDate">If the shipment is for a future date, and if a rate change is expected before the shipment date, use this field to ensure you get the correct rates and correct rate rules. Note that a rate change can affect the structure of the rate rules as well as the actual rates.Specify this value in UTC/GMT, not in local time. Formats allowed are   * **YYYY-MM-DD**   * **YYYY-MM-DD HH:mm:ss** * **YYYY-MM-DD HH:mm:ss.SSS** (optional)</param>
        /// <param name="returnShipment">If set to true, provides only services applicable for return shipment. (optional)</param>
        /// <param name="compactResponse">If set to true, returns only summary, without special service details. (optional)</param>
        /// <returns>Task of ApiResponse (CarrierRule)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CarrierRule>> GetCarrierServiceRulesAsyncWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, ISOCountryCode destinationCountryCode, bool? xPBUnifiedErrorStructure = default(bool?), string rateTypeId = default(string), string futureShipmentDate = default(string), DateTime? returnShipment = default(DateTime?), bool? compactResponse = default(bool?))
        {
            // verify the required parameter 'carrier' is set
            if (carrier == null)
                throw new ApiException(400, "Missing required parameter 'carrier' when calling CarrierInfoApi->GetCarrierServiceRules");
            // verify the required parameter 'originCountryCode' is set
            if (originCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'originCountryCode' when calling CarrierInfoApi->GetCarrierServiceRules");
            // verify the required parameter 'destinationCountryCode' is set
            if (destinationCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'destinationCountryCode' when calling CarrierInfoApi->GetCarrierServiceRules");

            var localVarPath = "/v1/information/rules/rating-services";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrier", carrier)); // query parameter
            if (originCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originCountryCode", originCountryCode)); // query parameter
            if (destinationCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinationCountryCode", destinationCountryCode)); // query parameter
            if (rateTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rateTypeId", rateTypeId)); // query parameter
            if (futureShipmentDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "futureShipmentDate", futureShipmentDate)); // query parameter
            if (returnShipment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnShipment", returnShipment)); // query parameter
            if (compactResponse != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "compactResponse", compactResponse)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierServiceRules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CarrierRule>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CarrierRule) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CarrierRule)));
        }

        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services. 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetCarrierSupportedDestination (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<List<Object>> localVarResponse = GetCarrierSupportedDestinationWithHttpInfo(carrier, originCountryCode, xPBUnifiedErrorStructure);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services. 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Object>> GetCarrierSupportedDestinationWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'carrier' is set
            if (carrier == null)
                throw new ApiException(400, "Missing required parameter 'carrier' when calling CarrierInfoApi->GetCarrierSupportedDestination");
            // verify the required parameter 'originCountryCode' is set
            if (originCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'originCountryCode' when calling CarrierInfoApi->GetCarrierSupportedDestination");

            var localVarPath = "/v1/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrier", carrier)); // query parameter
            if (originCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originCountryCode", originCountryCode)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierSupportedDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services. 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetCarrierSupportedDestinationAsync (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
             ApiResponse<List<Object>> localVarResponse = await GetCarrierSupportedDestinationAsyncWithHttpInfo(carrier, originCountryCode, xPBUnifiedErrorStructure);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This operation returns a list of supported destination countries to which the carrier offers international shipping services. 
        /// </summary>
        /// <exception cref="pitneyBower.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="carrier">The carrier name. Currently this must be set to: USPS</param>
        /// <param name="originCountryCode">The two-character ISO country code for the country where the shipment originates.</param>
        /// <param name="xPBUnifiedErrorStructure">Set this to true to use the standard [error object](https://shipping.pitneybowes.com/reference/error-object.html#standard-error-object) if an error occurs. (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetCarrierSupportedDestinationAsyncWithHttpInfo (Carrier carrier, ISOCountryCode originCountryCode, bool? xPBUnifiedErrorStructure = default(bool?))
        {
            // verify the required parameter 'carrier' is set
            if (carrier == null)
                throw new ApiException(400, "Missing required parameter 'carrier' when calling CarrierInfoApi->GetCarrierSupportedDestination");
            // verify the required parameter 'originCountryCode' is set
            if (originCountryCode == null)
                throw new ApiException(400, "Missing required parameter 'originCountryCode' when calling CarrierInfoApi->GetCarrierSupportedDestination");

            var localVarPath = "/v1/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (carrier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "carrier", carrier)); // query parameter
            if (originCountryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originCountryCode", originCountryCode)); // query parameter
            if (xPBUnifiedErrorStructure != null) localVarHeaderParams.Add("X-PB-UnifiedErrorStructure", this.Configuration.ApiClient.ParameterToString(xPBUnifiedErrorStructure)); // header parameter

            // authentication (oAuth2ClientCredentials) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCarrierSupportedDestination", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

    }
}
